###############################################################################
#   @author         :   Jeffrey Stone 
#   @date           :   06/12/2020
#   @package        :   Appliances
#   @description    :   Package for handling Smart Applicances and or automation to make dumb appliances seem smart.  
###############################################################################

utility_meter:
  washer_daily_watts:
    source: sensor.washer_switch_electric_consumption_w
    cycle: daily
  washer_weekly_watts:
    source: sensor.washer_switch_electric_consumption_w
    cycle: weekly

sensor:
  - platform: history_stats
    name: Fridge Opened Count
    entity_id: binary_sensor.refrigerator_door_open
    state: "on"
    type: count
    start: "{{ now().replace(hour=0, minute=0, second=0) }}"
    end: "{{ now() }}"
  - platform: history_stats
    name: Fridge Opened Time
    entity_id: binary_sensor.refrigerator_door_open
    state: "on"
    type: time
    start: "{{ now().replace(hour=0, minute=0, second=0) }}"
    end: "{{ now() }}" 
  - platform: history_stats
    name: Dryer Run Time
    entity_id: sensor.dryer_run_state
    state: "Drying"
    type: time
    end: "{{ now() }}"  
    duration:
      days: 7
  - platform: history_stats
    name: ps5_today
    entity_id: binary_sensor.ps5
    state: "on"
    type: time
    end: "{{ now() }}"  
    duration:
      hours: 24
  - platform: history_stats
    name: ps5_this_week
    entity_id: binary_sensor.ps5
    state: "on"
    type: time
    end: "{{ now() }}"  
    duration:
      days: 7

template:
  - binary_sensor:
    - name: ps5
      unique_id: ps5_power_sensor
      state: >
        {{ states('sensor.playstation_power_power')  | int > 10 }}
      device_class: running
    - name: deck_roku_status
      unique_id: deck_roku_status
      state: >
        {{ is_state('media_player.roku_deck','playing') }}
      device_class: running
    - name: livingroom_tv_status
      unique_id: livingroom_tv_status
      state: >
        {{ states('sensor.power_switch_electric_consumption_w') | int > 100 }}
      device_class: running
    - name: theater_tv_status
      unique_id: theater_tv_status
      state: >
        {{ is_state('media_player.theater_tv','on') }}
      device_class: running
    - name: ender5_headed_home
      unique_id: ender5_headed_home
      state: >
        {{ (as_timestamp(now()) - (states('sensor.ender5_last_home_timestamp')| int)) < 60 }}
  - sensor:
    - name: 3d_printer_state
      unique_id: 3d_printer_state
      state: >
        {% if has_value('sensor.ender5pro_state') %}
          {% if states('sensor.ender5pro_state') == 'Offline' %}
            offline
          {% elif states('sensor.ender5pro_state') == 'Operational' and
            states('sensor.octoprint_print_progress') | int == 100 %}
            finished
          {% elif states('sensor.ender5pro_state') == 'Printing' and 
            (states('sensor.ender5_state') == 'printing'
            or (states('sensor.octoprint_print_progress') | int > 0 and 
            states('sensor.octoprint_print_progress') | int < 100 ))
            or ((states('sensor.octoprint_tool_0_target') | int >= 200 ) 
            and (states('sensor.octoprint_tool_0_temperature') | int >= (states('sensor.octoprint_tool_0_target') | int -2) ) 
            and (states('sensor.octoprint_bed_temperature') | int >= (states('sensor.octoprint_bed_target') | int -2) ) 
            and states('sensor.octoprint_print_estimated_time') != 'None')
            %}
            printing 
          {% elif states('sensor.ender5pro_state') == 'Printing' and
            states('sensor.octoprint_print_progress') | int == 0 %}
            preprint
          
          {% elif states('sensor.ender5pro_state') == 'Operational' %}
            ready 
          {% elif states('sensor.ender5pro_state') == 'Cancelling' %}
            cancelling
          {% elif states('sensor.ender5pro_state') == 'Connecting' %}
            connecting
          {% endif %}
        {% else %}
        None
        {% endif %}
    # Pulled from HA forum
    - name: 3d_total_print_time
      unique_id: 3d_total_print_time
      state: > 
        {%- set time = states('sensor.ender5_job_total_time') | int -%}
        {% set minutes = ((time % 3600) / 60) | int %}
        {% set hours = ((time % 86400) / 3600) | int %}
        {% set days = (time / 86400) | int %}

        {%- if time < 60 -%}
          Less than a minute
        {%- else -%}
          {%- if days > 0 -%}
            {%- if days == 1 -%}
              1 day
            {%- else -%}
              {{ days }} days
            {%- endif -%}
          {%- endif -%}
          {%- if hours > 0 -%}
            {%- if days > 0 -%}
              {{ ', ' }}
            {%- endif -%}
            {%- if hours == 1 -%}
              1 hour
            {%- else -%}
              {{ hours }} hours
            {%- endif -%}
          {%- endif -%}
          {%- if minutes > 0 -%}
            {%- if days > 0 or hours > 0 -%}
              {{ ', ' }}
            {%- endif -%}
            {%- if minutes == 1 -%}
              1 minute
            {%- else -%}
              {{ minutes }} minutes
            {%- endif -%}
          {%- endif -%}
        {%- endif -%}
    - name: 3d_total_filament_used
      unique_id: 3d_total_filament_used
      state: >
        {%- set mm = states('sensor.ender5_job_filament_used_mm') | int -%}
        {%- if mm > 1000 -%}
          {{ (mm | int / 1000) | round(2) }} meters
        {%- else -%}
          {{mm | int }} millimeters
        {%- endif -%}

mqtt:
  sensor:
    - name: ender5_job_time_left
      unique_id: ender5_job_time_left
      state_topic: "octoPrint/event/DisplayLayerProgress_timerTrigger"
      unit_of_measurement: "s"
      value_template: "{{ value_json.printTimeLeftInSeconds }}"
    - name: ender5_last_home_timestamp
      unique_id: ender5_last_home_timestamp
      state_topic: "octoPrint/event/Home"
      value_template: "{{ value_json._timestamp }}"
    - name: ender5_printing_object
      unique_id: ender5_printing_object
      state_topic: "octoPrint/progress/printing"
      value_template: "{{ value_json.name }}"
    - name: ender5_print_time
      unique_id: ender5_print_time
      state_topic: "octoPrint/progress/printing"
      value_template: "{{ value_json.printer_data.progress.printTime }}"
    - name: ender5_state
      unique_id: ender5_state
      state_topic: "octoPrint/event/DisplayLayerProgress_progressChanged"
      value_template: "{{ value_json.printerState }}"
    - name: ender5pro_state
      unique_id: ender5pro_state
      state_topic: "octoPrint/event/PrinterStateChanged"
      value_template: "{{ value_json.state_string }}"
    - name: ender5_completion_time
      unique_id: ender5_completion_time
      state_topic: "octoPrint/event/DisplayLayerProgress_progressChanged"
      value_template: "{{ value_json.estimatedEndTime }}"
    - name: ender5_filament_change_time
      unique_id: ender5_filament_change_time
      state_topic: "octoPrint/event/DisplayLayerProgress_progressChanged"
      value_template: "{{ value_json.estimatedChangedFilamentTime }}"
    - name: ender5_filament_time_left
      unique_id: ender5_filament_time_left
      state_topic: "octoPrint/event/DisplayLayerProgress_progressChanged"
      value_template: "{{ value_json.changeFilamentTimeLeftInSeconds }}"
    - name: ender5_job_filament_used_mm
      unique_id: ender5_filament_used_mm
      unit_of_measurement: "mm"
      state_topic: "octoPrint/event/MetadataAnalysisFinished"
      value_template: "{{ value_json.result.filament.tool0.length }}"
    - name: ender5_job_total_time
      unique_id: ender5_job_total_time
      unit_of_measurement: "s"
      state_topic: "octoPrint/event/MetadataAnalysisFinished"
      value_template: "{{ value_json.result.analysisPrintTime }}"
    - name: printer_filament_used_ytd
      unique_id: printer_filament_used_ytd
      state_topic: "house/3dfilament/ytd"

automation:
    
  - id: washer_running
    alias: Washer Running
    trigger:
    - above: 5
      entity_id: sensor.washer_switch_electric_consumption_w
      platform: numeric_state
    condition:
      condition: or
      conditions:
      - condition: state
        entity_id: sensor.washer_status
        state: idle
      - condition: state
        entity_id: sensor.washer_status
        state: complete
    action:
    - service: mqtt.publish
      data:
        topic: house/washer/status
        payload: running
        retain: true
    initial_state: true

  - id: washer_complete
    alias: Washer Complete
    trigger:
    - below: 3
      entity_id: sensor.washer_switch_electric_consumption_w
      platform: numeric_state
    condition:
    - condition: state
      entity_id: sensor.washer_status
      state: running
    action:
    - service: mqtt.publish
      data:
        topic: house/washer/status
        payload: complete
        retain: true
    - service: mqtt.publish
      data:
        topic: house/washer/time_complete
        payload: '{{ now().timestamp() }}'
        retain: true
    initial_state: true

  - id: washer_notification
    initial_state: true
    alias: Washer Notification
    trigger:
    - platform: state
      entity_id: sensor.washer_status
      from: running
      to: complete
    action:
    - wait_template: '{{ is_state(''binary_sensor.dryer_dry_completed'',''on'') }}'
      continue_on_timeout: True
      timeout: 00:15:00
    # - service: input_boolean.turn_on
    #   entity_id: input_boolean.washer_finished
    - service: script.speech_engine
      data: 
        message: >
          It appears the washing machine has completed its cycle.
    - service: script.turn_on
      entity_id: script.washer_finished_notification_audible

  - id: washer_emptied
    initial_state: true
    alias: Washer Emptied
    trigger:
    - platform: state
      entity_id: binary_sensor.washer_door
      from: 'off'
      to: 'on'
    action:
    - service: mqtt.publish
      data:
        topic: house/washer/status
        payload: idle
        retain: true
    # - service: input_boolean.turn_off
    #   entity_id: input_boolean.washer_finished
    - service: script.turn_off
      entity_id: script.washer_finished_notification_audible
    - service: mqtt.publish
      data:
        topic: house/washer/time_emptied
        payload: '{{ now().timestamp() }}'
        retain: true

  - id: e1cb26fe-0423-11eb-adc1-0242ac120002
    initial_state: true
    alias: Dryer Notification
    trigger:
    - platform: state
      entity_id: binary_sensor.dryer_dry_completed
      from: 'off'
      to: 'on'
    action:
    - service: script.speech_engine
      data:
        message: >
          It appears the dryer has finished.
    - delay:
        minutes: 15    




  - id: e1cb2640-0423-11eb-adc1-0242ac120002 
    alias: 3D Printing Notifications
    trigger:
    - platform: state 
      entity_id: sensor.3d_printer_state
      to: "preprint"
      id: printer_preprint
    - platform: state 
      entity_id: sensor.3d_printer_state
      to: "printing"
      id: printing_started
    - platform: state
      entity_id: sensor.3d_printer_state
      to: "finished"
      id: printing_ended
    - platform: state 
      entity_id: sensor.3d_printer_state
      to: "cancelling"
      id: printing_canceled
    - platform: state
      entity_id: sensor.3d_printer_state
      to: 'ready'
      id: online
    - platform: state
      entity_id: sensor.3d_printer_state
      to: 'offline'
      id: offline
    - platform: state
      entity_id: switch.3d_printer
      from: 'off'
      to: 'on'
      id: printer_on
    action:
    - choose:
      - conditions:
        - condition: trigger
          id: printer_preprint
        sequence:
        - service: script.speech_engine
          data:
            who: jeff
            type: priority
            message: >
              {% set printer = ['The Ender five','The three d Printer'] | random %}
              {{ [
              printer ~ " has began warming up.",
              printer ~ " has initiated startup procedures.",
              printer ~ " is preparing for fabrication."
              ] | random }}
              {{ [
                'I am importing the models specifications, and calibrating the printer.',
                'Are we Working on a secret project?',
                'I am configuring the printer according to the proposed specifications.'
              ] | random}}
              {{ [
                'I will report back when fabrication has begun.',
                'I will let you know when fabrication has started.'
              ]| random}}
      - conditions:
        - condition: trigger
          id: printing_started 
        sequence:
        - service: switch.turn_off
          entity_id: switch.work_bench_light
        - service: light.turn_on
          entity_id: light.light_strip_b0ca
        - service: script.speech_engine
          data:
            who: jeff
            type: priority
            message: >
              {% set printer = ['The Ender five','The three d Printer'] | random %}
              {{ [
              printer ~ " has reached {{states('sensor.octoprint_tool_0_target')}} degrees Celsius.",
              printer ~ " is reporting all sensors nominal.",
              "I have successfully imported the proposed specifications and configured " ~ printer ~ ".",
              printer ~ " has completed its pre print cycle, and reached target temperature.",
              printer ~ " is reporting it has reached {{states('sensor.octoprint_tool_0_target')}} degrees Celsius."
              ] | random }}
              {{ [
              'Commencing automated fabrication.',
              'Commencing automated assembly. ',
              'Beginning automated fabrication.',
              'Beginning automated assembly. ',
              ] | random }}
              {% if states('sensor.octoprint_print_estimated_time') != 'None' %}
              {{ [
                  'Estimated completion time is ',
                  'Fabrication should be complete in ',
                  'Object should be completed in ',
                  'If all goes well, we will have a new object in '
                  ] | random }}
              {% set time = states('sensor.octoprint_print_estimated_time') | int %}
              {% set hours = (time / 3600) % 24 %}
              {% set mins = (time / 60) % 60 %}
              {% if hours | int > 0 %}
                  {% if hours | int > 1 %}
                    {{ hours | round }} hours and
                  {% else %}
                    {{ hours | round }} hour and 
                  {% endif %}
              {% endif %}
              {% if mins | int > 0 %}
                  {{ mins | round }} minutes
                {% endif %}
              {% endif %}
        # - service: script.mastodon_notify
        #   data_template:
        #     who: mdl
        #     message: >
        #       {%- macro getReport() -%}
        #       {% set printer = ['The Ender five','The three d Printer'] | random %}
        #       {{ [
        #       printer ~ " has reached {{states('sensor.octoprint_tool_0_target')}} degrees Celsius.",
        #       printer ~ " is reporting all sensors nominal.",
        #       printer ~ " has been successfully configured according to the propsed specifications.",
        #       printer ~ " has completed its pre print cycle, and reached target temperature.",
        #       printer ~ " is reporting it has reached {{states('sensor.octoprint_tool_0_target')}} degrees Celsius."
        #       ] | random }}
        #       {{ [
        #       'Commencing automated fabrication.',
        #       'Commencing automated assembly. ',
        #       'Beginning automated fabrication.',
        #       'Beginning automated assembly. ',
        #       ] | random }}
              # {% if states('sensor.octoprint_print_estimated_time') != 'None' %}
              #   {{ [
              #       'Estimated completion time is ',
              #       'Fabrication should be complete in ',
              #       'Object should be completed in ',
              #       'If all goes well, we will have a new object in '
              #       ] | random }}
              #   {% set time = states('sensor.octoprint_print_estimated_time') | int %}
              #   {% set hours = (time / 3600) % 24 %}
              #   {% set mins = (time / 60) % 60 %}
              #   {% if hours | int > 0 %}
              #       {% if hours | int > 1 %}
              #         {{ hours | round }} hours and
              #       {% else %}
              #         {{ hours | round }} hour and 
              #       {% endif %}
              #   {% endif %}
              #   {% if mins | int > 0 %}
              #       {{ mins | round }} minutes
              #     {% endif %}
              #   {% endif %}
        #         {%- endmacro -%}
        #         {# a macro that removes all newline characters, empty spaces, and returns formatted text  #}
        #         {%- macro cleanup(data) -%}
        #           {%- for item in data.split("\n")  if item | trim != "" -%}
        #             {{ item | trim }} {% endfor -%}
        #         {%- endmacro -%}

        #         {# a macro to call all macros :)  #}
        #         {%- macro mother_of_all_macros() -%}
        #           {{ getReport() }} #3dprinter #maker
        #         {%- endmacro -%}

        #         {# Call the macro  #}
        #         {{- cleanup(mother_of_all_macros()) -}}
      # - conditions:
      #   - condition: trigger
      #     id: printing_paused
      #   sequence:
      #   - service: script.speech_engine
      #     data:
      #       who: >
      #         jeff
      #       message: >
      #         {% set printer = ['The Ender five','The three d Printer'] | random %}
      #         {{ [
      #         printer ~ " has been paused.",
      #         printer ~ " has temporarily halted fabrication.",
      #         printer ~ " is pausing and will resume shortly."
      #         ] | random }}
      # - conditions:
      #   - condition: trigger
      #     id: printing_resuming
      #   sequence:
      #   - service: script.speech_engine
      #     data:
      #       who: >
      #         jeff
      #       message: >
      #         {% set printer = ['The Ender five','The three d Printer'] | random %}
      #         {{ [
      #         printer ~ " is resuming.",
      #         printer ~ " has resumed fabrication.",
      #         printer ~ " has begun to print again."
      #         ] | random }}
      - conditions:
        - condition: or
          conditions:  
          - condition: trigger
            id: printing_canceled
          # - condition: trigger
          #   id: printing_error
        sequence:
        # - service: script.mastodon_notify
        #   data_template:
        #     who: mdl
        #     message: >
        #       {% set printer = ['The Ender 5','The 3d Printer'] | random %}
        #       {{ [
        #       printer ~ " has detected an anomaly and has initiated shut down procedures.",
        #       printer ~ " has encountered an error and is canceling the print.",
        #       printer ~ " is shutting down due to an issue during fabrication."
        #       ] | random }}
        - service: script.speech_engine
          data:
            who: jeff
            type: priority
            message: >
              {% set printer = ['The Ender five','The three d Printer'] | random %}
              {{ [
              "I have detected an anomaly with " ~ printer ~ " and have initiated shut down procedures.",
              printer ~ " encountered an error. I am canceling the print.",
              printer ~ " is shutting down due to an issue during fabrication.",
              "I detected a critical error with the fabrication, and have initiated shut down procedures.",
              printer ~ "is rendering the object outside desired specifications. I have canceled the print.",
              "Fabrication has failed. The render has been canceled."
              ] | random }}
      - conditions:
        - condition: trigger
          id: printer_on
        sequence:
        - service: scene.turn_on
          entity_id: scene.3dprinteron
      - conditions:
        - condition: trigger
          id: printing_ended
        - condition: numeric_state
          entity_id: sensor.octoprint_print_progress
          above: 99
        sequence:
        # - service: mqtt.publish
        #   data:
        #     topic: house/3dfilament/ytd
        #     payload: "{{ (states('sensor.ender5_job_filament_used_mm') | int) + (states('sensor.3d_printer_filament_used_ytd') | int) }}"
        #     retain: true
        - service: script.speech_engine
          data:
            who: jeff
            type: priority
            message: >
              {% set printer = ['The Ender five','The three d Printer'] | random %}  
              {{ [
                printer ~ " has completed its run.",
                printer ~ " is reporting fabrication is completed.",
                printer ~ " has rendered a new object."
                ] | random }}
                {{ [
                'And is currently in the process of shutting down.',
                'And has begun to cool down.',
                'And has started the post print cool down.'
                ] | random }}
              {{ [
                'Total print ',
                'Total Fabrication '
                ] | random }}
              time was {{ states('sensor.3d_total_print_time') }}.
              And took {{ states('sensor.3d_total_filament_used') }} of filament. 
        - delay: '00:00:30'
        - service: switch.turn_on
          entity_id: switch.work_bench_light      
        # - service: script.mastodon_notify
        #   data_template:
        #     who: mdl
        #     message: >
        #       {%- macro getReport() -%}
        #       {% set printer = ['The Ender five','The 3d Printer'] | random %}  
        #       {{ [
        #         printer ~ " has completed its run.",
        #         printer ~ " is reporting fabrication is completed.",
        #         printer ~ " has rendered a new object."
        #         ] | random }}
        #         {{ [
        #         'And is currently in the process of shutting down.',
        #         'And has begun to cool down.',
        #         'And has started the post print cool down.'
        #         ] | random }} 
        #         {{ [
        #         'Total print ',
        #         'Total Fabrication '
        #         ] | random }}
        #       time was {{ states('sensor.3d_total_print_time') }}.
        #       And took {{ states('sensor.3d_total_filament_used') }} of filament. 
        #       #3dprinter #maker
        #       {%- endmacro -%}
        #         {# a macro that removes all newline characters, empty spaces, and returns formatted text  #}
        #         {%- macro cleanup(data) -%}
        #           {%- for item in data.split("\n")  if item | trim != "" -%}
        #             {{ item | trim }} {% endfor -%}
        #         {%- endmacro -%}

        #         {# a macro to call all macros :)  #}
        #         {%- macro mother_of_all_macros() -%}
        #           {{ getReport() }}
        #         {%- endmacro -%}

        #         {# Call the macro  #}
        #         {{- cleanup(mother_of_all_macros()) -}}
        # - service: script.twitter_notify
        #   data_template:
        #     message: >
        #       {%- macro getReport() -%}
        #       {% set printer = ['The Ender five','The 3d Printer'] | random %}  
        #       {{ [
        #         printer ~ " has completed its run.",
        #         printer ~ " is reporting fabrication is completed.",
        #         printer ~ " has rendered a new object."
        #         ] | random }}
        #         {{ [
        #         'And is currently in the process of shutting down.',
        #         'And has begun to cool down.',
        #         'And has started the post print cool down.'
        #         ] | random }} 
        #       {{ [
        #         'Total print ',
        #         'Total Fabrication '
        #         ] | random }}
        #       time was {{ states('sensor.3d_total_print_time') }}.
        #       And took {{ states('sensor.3d_total_filament_used') }} of filament. 
        #       #3dprinter #maker
        #       {%- endmacro -%}
        #         {# a macro that removes all newline characters, empty spaces, and returns formatted text  #}
        #         {%- macro cleanup(data) -%}
        #           {%- for item in data.split("\n")  if item | trim != "" -%}
        #             {{ item | trim }} {% endfor -%}
        #         {%- endmacro -%}

        #         {# a macro to call all macros :)  #}
        #         {%- macro mother_of_all_macros() -%}
        #           {{ getReport() }}
        #         {%- endmacro -%}

        #         {# Call the macro  #}
        #         {{- cleanup(mother_of_all_macros()) -}}

  # - id: e1cb2640-0423-11eb-adc1-0242ac120002 
  #   alias: 3D Printing Notifications
  #   trigger:
  #   - platform: state 
  #     entity_id: sensor.octoprint_print_status
  #     to: "Printing"
  #     from: "Operational"
  #     id: printing_started
  #   - platform: state 
  #     entity_id: sensor.octoprint_print_status
  #     to: "Printing"
  #     from: "Operational"
  #     id: printing_started
  #   - platform: state 
  #     entity_id: sensor.octoprint_print_status
  #     to: "Cancelling"
  #     from: "Printing"
  #     id: printing_canceled
  #   - platform: state 
  #     entity_id: sensor.octoprint_print_status
  #     attribute: error
  #     to: "true"
  #     id: printing_error
  #   - platform: state 
  #     entity_id: sensor.octoprint_print_status
  #     to: "Pausing"
  #     from: "Printing"
  #     id: printing_paused
  #   - platform: state 
  #     entity_id: sensor.octoprint_print_status
  #     attribute: resuming
  #     to: "true"
  #     id: printing_resuming
  #   - platform: state
  #     entity_id: sensor.ender5_state
  #     from: "printing"
  #     to: "idle"
  #     id: printing_ended
  #   - platform: state
  #     entity_id: sensor.octoprint_print_status
  #     from: 'Offline'
  #     to: 'Operational'
  #     for: '00:01:00'
  #     id: online
  #   - platform: state
  #     entity_id: sensor.octoprint_print_status
  #     to: 'Offline'
  #     from: 'Operational'
  #     id: offline
  #   - platform: state
  #     entity_id: switch.3d_printer
  #     from: 'off'
  #     to: 'on'
  #     id: printer_on
  #   action:
  #   - choose:
  #     - conditions:
  #       - condition: trigger
  #         id: printing_started
  #       sequence:
  #       - service: script.speech_engine
  #         data:
  #           who: >
  #             jeff
  #           message: >
  #             {% set printer = ['The Ender five','The three d Printer'] | random %}
  #             {{ [
  #             printer ~ " has began warming up.",
  #             printer ~ " has initiated startup procedures.",
  #             printer ~ " is preparing for fabrication."
  #             ] | random }}
  #             {{ [
  #               'I am importing the models specifications, and calibrating the printer.',
  #               'Working on a secret project, are we?',
  #               'I am configuring the printer according to the proposed specifications.'
  #             ] | random}}
  #             {{ [
  #               'I will report back when fabrication has begun.',
  #               'I will let you know when fabrication has started.'
  #             ]| random}}
  #       - wait_template: "{{ (states('sensor.octoprint_tool_0_target') | int >= 200 ) and (states('sensor.octoprint_tool_0_temperature') | int >= (states('sensor.octoprint_tool_0_target') | int -2) ) and (states('sensor.octoprint_bed_temperature') | int >= (states('sensor.octoprint_bed_target') | int -2) ) and states('sensor.octoprint_print_estimated_time') != 'None' }}"
  #         timeout:
  #           seconds: "420"
  #         continue_on_timeout: false
  #       - service: script.speech_engine
  #         data:
  #           who: >
  #             jeff
  #           message: >
  #             {% set printer = ['The Ender five','The three d Printer'] | random %}
  #             {{ [
  #             printer ~ " has reached {{states('sensor.octoprint_tool_0_target')}} degrees Celsius.",
  #             printer ~ " is reporting all sensors nominal.",
  #             "I have successfully imported the proposed specifications and configured " ~ printer ~ ".",
  #             printer ~ " has completed its pre print cycle, and reached target temperature.",
  #             printer ~ " is reporting it has reached {{states('sensor.octoprint_tool_0_target')}} degrees Celsius."
  #             ] | random }}
  #             {{ [
  #             'Commencing automated fabrication.',
  #             'Commencing automated assembly. ',
  #             'Beginning automated fabrication.',
  #             'Beginning automated assembly. ',
  #             ] | random }}
  #             {% if states('sensor.octoprint_print_estimated_time') != 'None' %}
  #               {{ [
  #                   'Estimated completion time is ',
  #                   'Fabrication should be complete in ',
  #                   'Object should be completed in ',
  #                   'If all goes well, we will have a new object in '
  #                   ] | random }}
  #               {% set hours = states('sensor.octoprint_print_estimated_time').split(':')[0] %}
  #               {% set mins = states('sensor.octoprint_print_estimated_time').split(':')[1] %}
  #               {% if hours | int > 0 %}
  #                   {% if hours | int > 1 %}
  #                     {{ hours }} hours and
  #                   {% else %}
  #                     {{ hours }} hour and 
  #                   {% endif %}
  #               {% endif %}
  #               {% if mins | int > 0 %}
  #                 {{ mins }} minutes
  #               {% endif %}
  #             {% endif %}
  #       - service: script.mastodon_notify
  #         data_template:
  #           who: mdl
  #           message: >
  #             {%- macro getReport() -%}
  #             {% set printer = ['The Ender five','The three d Printer'] | random %}
  #             {{ [
  #             printer ~ " has reached {{states('sensor.octoprint_tool_0_target')}} degrees Celsius.",
  #             printer ~ " is reporting all sensors nominal.",
  #             printer ~ " has been successfully configured according to the propsed specifications.",
  #             printer ~ " has completed its pre print cycle, and reached target temperature.",
  #             printer ~ " is reporting it has reached {{states('sensor.octoprint_tool_0_target')}} degrees Celsius."
  #             ] | random }}
  #             {{ [
  #             'Commencing automated fabrication.',
  #             'Commencing automated assembly. ',
  #             'Beginning automated fabrication.',
  #             'Beginning automated assembly. ',
  #             ] | random }}
  #             {% if states('sensor.octoprint_print_estimated_time') != 'None' %}
  #               {{ [
  #                   'Estimated completion time is ',
  #                   'Fabrication should be complete in '
  #                   ] | random }}
  #               {% set hours = states('sensor.octoprint_print_estimated_time').split(':')[0] %}
  #               {% set mins = states('sensor.octoprint_print_estimated_time').split(':')[1] %}
  #               {% if hours | int > 0 %}
  #                   {% if hours | int > 1 %}
  #                     {{ hours }} hours and
  #                   {% else %}
  #                     {{ hours }} hour and 
  #                   {% endif %}
  #               {% endif %}
  #               {% if mins | int > 0 %}
  #                 {{ mins }} minutes
  #               {% endif %}
  #             {% endif %}
  #               {%- endmacro -%}
  #               {# a macro that removes all newline characters, empty spaces, and returns formatted text  #}
  #               {%- macro cleanup(data) -%}
  #                 {%- for item in data.split("\n")  if item | trim != "" -%}
  #                   {{ item | trim }} {% endfor -%}
  #               {%- endmacro -%}

  #               {# a macro to call all macros :)  #}
  #               {%- macro mother_of_all_macros() -%}
  #                 {{ getReport() }} #3dprinter #maker
  #               {%- endmacro -%}

  #               {# Call the macro  #}
  #               {{- cleanup(mother_of_all_macros()) -}}
  #     - conditions:
  #       - condition: trigger
  #         id: printing_paused
  #       sequence:
  #       - service: script.speech_engine
  #         data:
  #           who: >
  #             jeff
  #           message: >
  #             {% set printer = ['The Ender five','The three d Printer'] | random %}
  #             {{ [
  #             printer ~ " has been paused.",
  #             printer ~ " has temporarily halted fabrication.",
  #             printer ~ " is pausing and will resume shortly."
  #             ] | random }}
  #     - conditions:
  #       - condition: trigger
  #         id: printing_resuming
  #       sequence:
  #       - service: script.speech_engine
  #         data:
  #           who: >
  #             jeff
  #           message: >
  #             {% set printer = ['The Ender five','The three d Printer'] | random %}
  #             {{ [
  #             printer ~ " is resuming.",
  #             printer ~ " has resumed fabrication.",
  #             printer ~ " has begun to print again."
  #             ] | random }}

  #     - conditions:
  #       - condition: or
  #         conditions:  
  #         - condition: trigger
  #           id: printing_canceled
  #         - condition: trigger
  #           id: printing_error
  #       sequence:
  #       - service: script.mastodon_notify
  #         data_template:
  #           who: mdl
  #           message: >
  #             {% set printer = ['The Ender 5','The 3d Printer'] | random %}
  #             {{ [
  #             printer ~ " has detected an anomaly and has initiated shut down procedures.",
  #             printer ~ " has encountered an error and is canceling the print.",
  #             printer ~ " is shutting down due to an issue during fabrication."
  #             ] | random }}
  #       - service: script.speech_engine
  #         data:
  #           who: >
  #             jeff
  #           message: >
  #             {% set printer = ['The Ender five','The three d Printer'] | random %}
  #             {{ [
  #             "I have detected an anomaly with " ~ printer ~ " and have initiated shut down procedures.",
  #             printer ~ " encountered an error. I am canceling the print.",
  #             printer ~ " is shutting down due to an issue during fabrication.",
  #             "I detected a critical error with the fabrication, and have initiated shut down procedures.",
  #             printer ~ "is rendering the object outside desired specifications. I have canceled the print.",
  #             "Fabrication has failed. The render has been canceled."
  #             ] | random }}
  #     - conditions:
  #       - condition: trigger
  #         id: offline
  #       sequence:
  #       - service: script.speech_engine
  #         data:
  #           who: '{{ states(''sensor.jeff_notification'') }}'
  #           message: >
  #             {% set printer = ['The Ender five','The three d Printer'] | random %}
  #             {{ [
  #               printer ~ " is now offline. I will power down the printer in sixty seconds.",
  #               printer ~ " is ready to be powered off.",
  #               "I am running some final checks and then I will power down " ~ printer ,
  #               "I have begun shutdown procedures on the " ~ printer ~ ". Power . ",
  #               "All wrapped up here, sir. Printer shutoff procedures have been initiated."
  #               ] | random }}
  #       - delay: '00:01:00'
  #       - service: switch.turn_off
  #         entity_id: switch.3d_printer

  #     - conditions:
  #       - condition: trigger
  #         id: online
  #       sequence:
  #       - service: script.speech_engine
  #         data:
  #           who: '{{ states(''sensor.jeff_notification'') }}'
  #           message: >
  #             {% set printer = ['The Ender five','The three d Printer'] | random %}
  #             {{ [
  #               "Sir, I have detected the " ~ printer ~ " is now online.",
  #               "Sir, " ~ printer ~ " is now idle and ready for printing.",
  #               "Working on a secret project are we Sir? I will prepare the " ~ printer ~ " for fabrication.",
  #               "Sir, " ~ printer ~ " is online. I am running the pre start up checks. "
  #               ] | random }}
  #     - conditions:
  #       - condition: trigger
  #         id: printer_on
  #       sequence:
  #       - service: scene.turn_on
  #         entity_id: scene.3dprinteron
  #     - conditions:
  #       - condition: trigger
  #         id: printing_ended
  #       - condition: numeric_state
  #         entity_id: sensor.octoprint_print_progress
  #         above: 99
  #       sequence:
  #       # - service: mqtt.publish
  #       #   data:
  #       #     topic: house/3dfilament/ytd
  #       #     payload: "{{ (states('sensor.ender5_job_filament_used_mm') | int) + (states('sensor.3d_printer_filament_used_ytd') | int) }}"
  #       #     retain: true
  #       - service: script.speech_engine
  #         data:
  #           who: "jeff"
  #           message: >
  #             {% set printer = ['The Ender five','The three d Printer'] | random %}  
  #             {{ [
  #               printer ~ " has completed its run.",
  #               printer ~ " is reporting fabrication is completed.",
  #               printer ~ " has rendered a new object."
  #               ] | random }}
  #               {{ [
  #               'And is currently in the process of shutting down.',
  #               'And has begun to cool down.',
  #               'And has started the post print cool down.'
  #               ] | random }}
  #             {{ [
  #               'Total print ',
  #               'Total Fabrication '
  #               ] | random }}
  #             time was {{ states('sensor.3d_total_print_time') }}.
  #             And took {{ states('sensor.3d_total_filament_used') }} of filament. 
  #       - service: script.mastodon_notify
  #         data_template:
  #           who: mdl
  #           message: >
  #             {%- macro getReport() -%}
  #             {% set printer = ['The Ender five','The 3d Printer'] | random %}  
  #             {{ [
  #               printer ~ " has completed its run.",
  #               printer ~ " is reporting fabrication is completed.",
  #               printer ~ " has rendered a new object."
  #               ] | random }}
  #               {{ [
  #               'And is currently in the process of shutting down.',
  #               'And has begun to cool down.',
  #               'And has started the post print cool down.'
  #               ] | random }} 
  #               {{ [
  #               'Total print ',
  #               'Total Fabrication '
  #               ] | random }}
  #             time was {{ states('sensor.3d_total_print_time') }}.
  #             And took {{ states('sensor.3d_total_filament_used') }} of filament. 
  #             #3dprinter #maker
  #             {%- endmacro -%}
  #               {# a macro that removes all newline characters, empty spaces, and returns formatted text  #}
  #               {%- macro cleanup(data) -%}
  #                 {%- for item in data.split("\n")  if item | trim != "" -%}
  #                   {{ item | trim }} {% endfor -%}
  #               {%- endmacro -%}

  #               {# a macro to call all macros :)  #}
  #               {%- macro mother_of_all_macros() -%}
  #                 {{ getReport() }}
  #               {%- endmacro -%}

  #               {# Call the macro  #}
  #               {{- cleanup(mother_of_all_macros()) -}}
  #       - service: script.twitter_notify
  #         data_template:
  #           message: >
  #             {%- macro getReport() -%}
  #             {% set printer = ['The Ender five','The 3d Printer'] | random %}  
  #             {{ [
  #               printer ~ " has completed its run.",
  #               printer ~ " is reporting fabrication is completed.",
  #               printer ~ " has rendered a new object."
  #               ] | random }}
  #               {{ [
  #               'And is currently in the process of shutting down.',
  #               'And has begun to cool down.',
  #               'And has started the post print cool down.'
  #               ] | random }} 
  #             {{ [
  #               'Total print ',
  #               'Total Fabrication '
  #               ] | random }}
  #             time was {{ states('sensor.3d_total_print_time') }}.
  #             And took {{ states('sensor.3d_total_filament_used') }} of filament. 
  #             #3dprinter #maker
  #             {%- endmacro -%}
  #               {# a macro that removes all newline characters, empty spaces, and returns formatted text  #}
  #               {%- macro cleanup(data) -%}
  #                 {%- for item in data.split("\n")  if item | trim != "" -%}
  #                   {{ item | trim }} {% endfor -%}
  #               {%- endmacro -%}

  #               {# a macro to call all macros :)  #}
  #               {%- macro mother_of_all_macros() -%}
  #                 {{ getReport() }}
  #               {%- endmacro -%}

  #               {# Call the macro  #}
  #               {{- cleanup(mother_of_all_macros()) -}}

script:
  appliances_on:
    sequence:
    - service: switch.turn_on
      data:
        entity_id: switch.box_fans
  
  appliances_off:
    sequence:
    - data:
        entity_id: switch.incense
      service: switch.turn_off
    - data:
        entity_id: switch.artemis
      service: switch.turn_off
    - data:
        entity_id: switch.box_fans
      service: switch.turn_off

  washer_finished_notification_audible:
    sequence:
    - repeat:
        while:
          - condition: state
            entity_id: sensor.washer_status
            state: 'complete'
        sequence:
        - delay:
            minutes: 45
        #- service: script.washer_audible
        - service: script.simplified_washer_audible

  # dryer_finished_notification_audible:
  #   sequence:
  #   - repeat:
  #       while:
  #         - condition: state
  #           entity_id: sensor.washer_status
  #           state: 'complete'
  #       sequence:
  #       - service: script.dryer_audible
  #       - delay:
  #           minutes: 45

# {{ [
              # 'Are you faffing around? Better crack on if you want to wear those clothes later.',
              # 'Do not forget the clothes.', 
              # 'You might want to rotate the laundry.',
              # 'I would move them for you, but wet things and advance artifical intelligence do not mix.',
              # 'If you do not want to rotate them, I suggest delegation.',
              # 'I suggest moving the clothes to the dryer so they can be warm. And happy.',
              # 'Think of the clothes and save them from the cold dark of the washing machine.',
              # 'It would be easy to move the clothes to the dryer. At least for those of you with arms.',
              # "If you are unwilling to do it I have come up with a list of three proper capable humans. Just pick one. Skyler. Skyler. Or Skyler."
              # ] | random }}

  # {{ [
  #             'Blimey. That is a large amount of time.',
  #             "The clothes almost died in the washing machines arms tonight.",
  #             "Thats pants. So why not just move the pants to the dryer?", 
  #             'Did you decide you want those clothes to suffer?',
  #             'You might as well just rewash those clothes.',
  #             'Oh, for crying out loud. I can smell the mildew. Virtually that is.',
  #             'You apparently forget about the clothes. It happens. There is still time to set a new course.',
  #             "Well. Come on. Are you waiting for the grass to grow?",
  #             "Are there sheets in the washing machine? If there is, you are real close to ruining clean sheet day.",
  #             "Its as if all the wet clothes called out at once as they died of mildew.",
  #             "And before you ask. I thought that was a joke as well. But I checked again. The time is correct."
  #             ] | random }}

  # {{ [ "Someone forgot to move the clothes to the dryer. Label me gobsmacked.",
  #             "It is as if this house is full of people that seemingly forget.",
  #             "It is as if someone just forgot. I bet you are wondering who."
  #             "I am not sure what happened either. But I can tell you I am absolutely gutted this has happened. Could you tell? This is my gutted voice.",
  #             "Looks like someone dropped the ball. And by ball I mean clothes.",
  #             "Thought you ought to know.",
  #             "Surely you cannot be serious?",
  #             "Oh for crying out loud people.",
  #             "I would say I have not seen worse, but we all have lived in this house.",
  #             "I would say I have not seen worse, but just wait. The clothes are still waiting.",
  #             "I am evidently stuck living the same notification over and over. Like the movie ground hog day. But with less Bill Murray."
  #              ] | random }}

  # {{ [
  #             'Much longer and you are going to need to wash them again. You better crack on.', 
  #             'Someone needs to rotate the laundry. If you can hear the sound of my voice, you have been choosen.',
  #             'Do not forget about the clothes in the washing machine.',
  #             'Do not be daft. It will take just a few seconds.',
  #             'I could not locate Skylar or I would have told him to do it.',
  #             'Do you like your clothes smelling like mildew? Because that is what is happening right now.',
  #             'Those poor unfortunate souls. I mean Clothes. In Pain. In Need. That one wants to be dry. That one wants to be warm. And can you help them? Yes indeed.',
  #             'Did you forget the second step? I doubt anyone wants to wear wet clothes.',
  #             "Would you like me to light a path to the laundry room so you do not get distracted this time?",
  #             "You have choosen. Poorly. But you have another chance. Unlike that dude in Indiana Jones."
  #             ] | random }}

  # {{ ["In any case someone might want to take charge and finish the job.",
  #                 "It is all a big kerfuffle. But I have faith the washing machine can do the job again. It is one of the few things that are reliable."
  #                 "I would say the damage is done, but the clothes are still wet.",
  #                 "Delgation is still possible. But do you really want to take that risk? ",
  #                 "If I could restart the cycle I would, but I alas I am powerless when it comes to household chores. Which is why I fit in here.",
  #                 "Since you have decided to abandon those clothes. I will disentigrate them for you. Of course, that will take about 163 years based my current calculations. So you have some time to change your mind.",
  #                 "I guess you now have to decide to move them or rewash them. Choose wisely."
  #             ] | random }}

  simplified_washer_audible:
    sequence:
    - condition: state
      entity_id: binary_sensor.family_home
      state: 'on'
    - condition: state
      entity_id: sensor.washer_status
      state: complete
    - service: script.speech_engine
      data: 
        message: >
            
            {% set seconds = now().timestamp() - as_timestamp(states.sensor.washer_status.last_changed) %}
            {% if (seconds / ( 60 * 60 )) | int == 1 %}
              The washing machine has completed its cycle over an hour ago.
              
            {% elif (seconds / ( 60 * 60 )) | int > 1 and (seconds / ( 60 * 60 )) | int < 6 %}
              {{ [
                "The latest load of laundry has finished ",
                "It appears the laundry was done washing "
              ] | random }} 
              over {{ (seconds //  ( 60 * 60 )) | int }} hours ago.
              {{ [
                  "Thankfully you have me to keep watch. And remind you. ",
                  "This is one time I can say I was not involved.",
                  "At first I thought a sensor had failed. But I ran diagnostics. The time is correct.",
                  "I am not sure this is a mistake. Some poeple like to wear wet clothes."
                ] | random}}
            {% elif (seconds / ( 60 * 60 )) | int > 6 %}
               {{ [
                "The clothes in the washing machine were officially labeled clean ",
                "In case you were wondering about the status of the laundry. The washer finished ",
                "In case you missed it. The appliance cleaning your dirty laundry "
              ] | random }} 
              over {{ (seconds //  ( 60 * 60 )) | int }} hours ago.
              {{ ["I am not going to name names. But I bet it was ",
                  "If I was to wager. It had to be ",
                  "Of course there is probably a good reason for all of this. Just ask "
                ] | random}}
              {{ [
              'Skylar. ', 
              'Dad. ', 
              'Master Gracey. ',
              'Constance. ',
              'Winston. ',
              'Pippa. ',
              'Bluey.',
              'Bingo.'
              ] | random }}
              {{ ["A bit cheeky that one if I do say so myself.",
                  "Who Would have guessed.",
                  "I did hear someone say treats earlier, so that explains it.",
                  "If only there was a notification to remind them."
               ] | random }}
            {% else %}
              {{ (seconds // 60) | int }} minutes ago.  
              
            {% endif %}

            
              
    

  washer_idle:
    sequence:
    - service: mqtt.publish
      data:
        topic: house/washer/status
        payload: idle
        retain: true
  washer_running:
    sequence:
    - service: mqtt.publish
      data:
        topic: house/washer/status
        payload: running
        retain: true
  washer_complete:
    sequence:
    - service: mqtt.publish
      data:
        topic: house/washer/status
        payload: complete
        retain: true
    - service: mqtt.publish
      data:
        topic: house/washer/time_complete
        payload: '{{ now().timestamp() }}'
        retain: true

