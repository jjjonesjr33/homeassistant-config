###############################################################################
#   @author         :   Jeffrey Stone 
#   @date           :   02/19/2019
#   @package        :   Events
#   @description    :   Special Events.
###############################################################################

input_boolean:
  rex_manning_audio:
    name: Rex Manning audio
    icon: mdi:speaker-wireless
  blackout_time:
    name: Blackout Time
    icon: mdi:closed-octagon
  school_in_session:
    name: School In Session
    icon: mdi:bus-school
  school_is_digital:
    name: Digital Learning
    icon: mdi:laptop
  school_today:
    name: School Today
    icon: mdi:bus-school
  school_early_release:
    name: School Early Release
    icon: mdi:bus-school

input_datetime:
  school_first_day:
    name: First Day of School
    has_date: true
    has_time: false
  school_last_day:
    name: Last Day of School
    has_date: true
    has_time: false
  school_day_start:
    name: School Day Start
    has_date: false
    has_time: true
  school_day_end:
    name: School Day End
    has_date: false
    has_time: true
  fall_break_start:
    name: Fall Break
    has_date: true
    has_time: false
  thanksgiving_break_start:
    name: Thanksgiving Break
    has_date: true
    has_time: false
  christmas_break_start:
    name: Christmas Break
    has_date: true
    has_time: false
  winter_break_start:
    name: Winter Break
    has_date: true
    has_time: false
  spring_break_start:
    name: Spring Break
    has_date: true
    has_time: false
  school_day_start_reminder:
    name: School Day Start Reminder
    has_date: false
    has_time: true
  school_day_end_reminder:
    name: School Day End Reminder
    has_date: false
    has_time: true  
  blackout_time_start:
    name: Blackout Time Start
    has_date: false
    has_time: true
  blackout_time_end:
    name: Blackout Time End
    has_date: false
    has_time: true
  pest_service:
    name: Pest Service
    has_date: true
    has_time: true
  gutter_service:
    name: Pest Service
    has_date: true
    has_time: true
  skylar_first_bedtime_warning:
    name: Skylar First Bedtime Warning
    has_date: true
    has_time: true
  skylar_bedtime_warning:
    name: Skylar Bedtime Warning
    has_date: true
    has_time: true
  
template:
  - sensor:
      - name: school_start_days2go
        state: "{{ ((state_attr('input_datetime.school_first_day', 'timestamp')-as_timestamp(now())) | int /86400) | round(0) }}"
        unit_of_measurement: 'Days'
      - name: school_end_days2go
        state: "{{ ((state_attr('input_datetime.school_last_day', 'timestamp')-as_timestamp(now())) | int /86400) | round(0) + 1}}"
        unit_of_measurement: 'Days'
      - name: vacation_days2go
        state: >
          {% if state_attr('calendar.vacation', 'start_time') %}
            {{ ((as_timestamp(strptime(state_attr('calendar.vacation', 'start_time'), '%Y-%m-%d'))-as_timestamp(now())) | int /86400) | round(0) }}
          {% else %}
            999
          {% endif %}
        unit_of_measurement: 'Days'
      - name: skylar_bedtime_warning
        unique_id: skylar_bedtime_warning
        state: >
          {% set today = states('sensor.date') %}
          {% if is_state('binary_sensor.school_tomorrow','on') %}
          {% set test = today + " " + states('input_datetime.skylar_school_bedtime') %}
          {% else %}
          {% set test = today + " " + states('input_datetime.skylar_bedtime_holiday') %}
          {% endif %}
          {{ as_datetime(test) - timedelta(minutes=30) }}
        attributes:
          first_warning: >
            {% set today = states('sensor.date') %}
            {% if is_state('binary_sensor.school_tomorrow','on') %}
            {% set test = today + " " + states('input_datetime.skylar_school_bedtime') %}
            {% else %}
            {% set test = today + " " + states('input_datetime.skylar_bedtime_holiday') %}
            {% endif %}
            {{ as_datetime(test) - timedelta(minutes=40) }}
  - binary_sensor:
      - name: school_tomorrow
        state: >
          {% set next_event=as_timestamp(state_attr('calendar.school','start_time')) | timestamp_custom("%Y-%m-%d",true) %}
          {% set tomorrow=(now().date() + timedelta(days=1)) | string %}
          {{ next_event == tomorrow }}  

sensor:
  - platform: template
    sensors:
      school_today:
        value_template: >
            {% set today = states('sensor.date') %}
            {% set next_event = as_timestamp(state_attr('calendar.school','start_time')) 
                | timestamp_custom("%Y-%m-%d",true) %}
            {{ today == next_event }}
  
  # - platform: rest
  #   resource: https://raw.githubusercontent.com/thejeffreystone/home-assistant-configuration/master/config/packages/json_data/school.json
  #   name: School Lunch
  #   scan_interval: 14400
  #   value_template: >
  #     {% set today = now().month  ~ '/' ~ now().day  %}
  #     {% set lunch =  value_json.MENU.static[ today ] %}
  #     {%- if lunch %}
  #       {{ lunch  }}
  #     {% else %}
  #       Nothing
  #     {%- endif %}

  - platform: rest
    resource: https://raw.githubusercontent.com/thejeffreystone/home-assistant-configuration/master/config/packages/json_data/school.json
    name: School Event
    scan_interval: 14400
    value_template: >
      {% set today = now().month  ~ '/' ~ now().day  %}
      {% set event =  value_json.EVENTS.static[ today ] %}
      {%- if event %}
        {{ event  }}
      {% else %}
        Nothing
      {%- endif %}

  # - platform: mqtt 
  #   name: "Current Released HA Version"
  #   state_topic: "house/ha/version"


automation:
  - id: e1cb2d02-0423-11eb-adc1-0242ac120002
    alias: School today
    initial_state: true
    trigger:
    - platform: time
      at: '05:00:00'
    condition:
    - condition: template
      value_template: >
        {%- set next_event=as_timestamp(state_attr('calendar.school','start_time')) | timestamp_custom("%Y-%m-%d",true) %}
        {%- set today=now().date() %}
        {% if next_event == today %}
          true
        {% else %}
          false
        {% endif %}
    action:
    - choose:
      - conditions:
        - condition: template
          value_template: >
            {{ 'Early Release' in states('sensor.school_event') }}
        sequence:
        - service: input_boolean.turn_on
          entity_id: input_boolen.school_early_release
        - service: input_datetime.set_datetime
          target:
            entity_id: input_datetime.school_day_end
          data:
            time: "12:15:00"
      default:
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.school_day_end
        data:
          time: "14:20:00" 
    - service: input_boolean.turn_on
      entity_id: input_boolean.school_today  
    - service: script.turn_on
      entity_id: script.school_in_session
    - service: script.turn_on
      entity_id: script.digital_learning_day
  
  - id: 54f3d3c3-4e40-4cd8-a023-11cb38e8950f
    alias: Set Bedtime Warning
    initial_state: true
    trigger:
    - platform: time
      at: '15:00:00'
    action:
    - service: input_datetime.set_datetime
      target:
        entity_id: input_datetime.skylar_bedtime_warning
      data:
        timestamp: >
          {{ as_timestamp(states('sensor.skylar_bedtime_warning'))}}
    - service: input_datetime.set_datetime
      target:
        entity_id: input_datetime.skylar_first_bedtime_warning
      data:
        timestamp: >
          {{ as_timestamp(state_attr('sensor.skylar_bedtime_warning','first_warning'))}}

        
    

#   - id: rex_manning_audio
#     alias: Rex Manning Day Audio
#     initial_state: true
#     trigger:
#     - platform: time
#       at: '14:00:00'
#     condition:
#     - condition: state
#       entity_id: calendar.anchorage_holidays
#       state: "on"
#     - condition: template
#       value_template: >
#         {%- set event=states.calendar.anchorage_holidays.attributes.message %}
#         {%- if event == 'Rex Manning Day' %}
#           true
#         {%- endif -%}
#     action:
#     - service: script.turn_on
#       entity_id: script.rex_manning_audio
#     - delay:
#         seconds: 40
#     - service: script.turn_off
#       entity_id: script.rex_manning_audio
#     - service: media_player.media_stop
#       entity_id: media_player.ha_blue

#   - id: new_ha_notification
#     alias: New HA Notification
#     initial_state: true
#     trigger:
#     - platform: template
#       value_template: >
#         {{ states('sensor.home_assistant_website') > states('sensor.current_released_ha_version') }}
#     action:
#     - service: script.twitter_new_ha
#     - service: script.save_current_ha_version

# {% set next_event = as_timestamp(state_attr('calendar.school','start_time')) | timestamp_custom("%Y-%m-%d %H:%M",true) %}
#             {% if as_timestamp(now().replace(hour=7, minute=10)) | timestamp_custom("%Y-%m-%d %H:%M",true) == next_event %}
#               {{ ['Today is a school day.', 'You have school today.', 'It appears you have school today.'] | random }}
#             {% else %}
#               {{ ['Today is not a school day.', 'There is no school on the calendar today.', 'It appears you do not have school today.'] | random }}
#             {% endif %} 

script:

  get_school_info:
    sequence:
      - variables:
          today: >
            {{ now().replace(hour=0, minute=0, second=0) }}
          tomorrow: >
            {{ now().replace(hour=11, minute=59, second=59) + timedelta(days=1) }}
      - service: calendar.list_events
        data:
          start_date_time: >
            {{ today }}
          end_date_time: >
            {{ tomorrow }}
        target:
          entity_id: calendar.school
        response_variable: school
      - service: calendar.list_events
        data:
          start_date_time: >
            {{ today }}
          end_date_time: >
            {{ tomorrow }}
        target:
          entity_id: calendar.school_lunch
        response_variable: school_lunch
      - variables:
          is_school_day: >
            {% if school.events %}
              {%- for event in school.events if as_timestamp(event.start) | timestamp_custom("%Y-%m-%d",true) == as_timestamp(now().date()) | timestamp_custom("%Y-%m-%d",true) %}
                {% if event.summary is defined and event.summary == 'School Day' %}
                  yes
                {% else %}
                  no
                {% endif %}
              {% endfor %}
            {% endif %}
          school_today: >
            {% if school.events %}
              {%- for event in school.events if as_timestamp(event.start) | timestamp_custom("%Y-%m-%d",true) == as_timestamp(now().date()) | timestamp_custom("%Y-%m-%d",true) %}
                {% if event.summary is defined and event.summary == 'School Day' %}
                  {{ ['Today is a school day.', 'You have school today.', 'It appears you have school today.'] | random }}
                {% else %}
                  {{ ['Today is not a school day.', 'There is no school on the calendar today.', 'It appears you do not have school today.'] | random }}
                {% endif %}
              
                {% if event.description is defined %}
                  {% if '#firstday' in event.description %}
                    And it is the first day of a new school year. so that is exciting!
                  {% elif '#lastday' in event.description %}
                    You have made it to the last day of the school year.
                  {% elif '#secondsemester' in event.description %}
                    You have made it half way through the school year. Now we start working towards Winter Break!
                  {% elif '#winterbreakover' in event.description %}
                    One break closer to Summer Break. Now we start working towards Spring Break!
                  {% elif '#springbreakover' in event.description %}
                    One break closer to Summer Break. Now just a few more weeks!
                  {% elif '#winterbreakstarts' in event.description %}
                    Just a few hours of work until Winter Break starts!
                  {% elif '#springbreakstarts' in event.description %}
                    Just a few hours of work until Spring break starts!
                  {% elif '#digital' in event.description %}
                    {{ ['But it is a digital learning day.',',And it is a Digital Learning Day.',',But you get to do it from home since it is digital learning.'] | random }}
                  {% else %}
        
                  {% endif %}
                {% endif %}
              {% endfor %}
              {% if school_lunch.events %}
                {%- for event in school_lunch.events %}
                  {% if event.start | string == (now().date()) | string %}
                    {{[ 
                      'On the Lunch menu today is ' ~ event.summary ~ '.',
                      'Today the lunch is ' ~ event.summary ~ ' which sounds good.',
                      'If you do not want ' ~ event.summary ~ ' let your parents know.',
                      'Looks like today is ' ~ event.summary ~ ' day at lunch.',
                      'The school menu shows ' ~ event.summary ~ ' day at lunch.',
                      event.summary ~ ' is what the school menu shows for lunch.',
                      'If you want ' ~ event.summary ~ ' for lunch just tell your father.',
                    ] | random }}
                  {% else %}
                    {{ [
                      "Unfortunately I am not sure what school lunch is going to be.",
                      "Looks like the school menu is blank.",
                      "Let me see. Oh. right. I have no idea what is for lunch at school today.",
                      "There appears to be a bit of a kerfuffle so I am unable to tell you what is on the lunch menu.",
                      "In terms of what is for lunch it appears we are going to have to do this the old fashion way since I cannot find todays menu.",
                      "Based on my information I think you might want to ask your father to make your lunch.",
                      "For lunch at school it appears to be whatever you take."
                      ] | random }}
                    {{ [
                      "A peanut butter sandwich sounds tasty.",
                      "You could always just roll the dice and choose from what they have today.",
                      "Maybe a spicy cheese sammie?",
                      "There is always cheese and crackers.",
                      "I am sure you father will sort it out.",
                      "So I guess go ask your father."
                      ] | random }}

                  {% endif %}
                {% endfor %}
              {% endif %}
            {% endif %}
          school_today_p: >
            {% if school.events %}
              {%- for event in school.events if as_timestamp(event.start) | timestamp_custom("%Y-%m-%d",true) == as_timestamp(now().date()) | timestamp_custom("%Y-%m-%d",true) %}
                {% if event.summary is defined and event.summary == 'School Day' %}
                  {{ ['Today is a school day.', 'Skylar has school today.', 'And you need to get going. because it is a school day.'] | random }}
                {% else %}
                  {{ ['Today is not a school day.', 'There is no school on the calendar today.', 'It appears there is no school today.'] | random }}
                {% endif %}
                {% if event.description is defined %}
                  {% if '#firstday' in event.description %}
                    And it is the first day of a new school year!
                  {% elif '#lastday' in event.description %}
                    We have made it to the last day of the school year.
                  {% elif '#secondsemester' in event.description %}
                    You have made it half way through the school year. Now we start working towards Winter Break!
                  {% elif '#winterbreakover' in event.description %}
                    One break closer to Summer Break. Now we start working towards Spring Break!
                  {% elif '#springbreakover' in event.description %}
                    One break closer to Summer Break. Now just a few more weeks!
                  {% elif '#winterbreakstarts' in event.description %}
                    Just a few hours of work until Winter Break starts!
                  {% elif '#springbreakstarts' in event.description %}
                    Just a few hours of work until Spring break starts!
                  {% elif '#digital' in event.description %}
                    ,{{ ['But it is a digital learning day.','And it is a Digital Learning Day.','But Skylar can do it from home since it is digital learning.'] | random }}
                  {% else %}
        
                  {% endif %}
                {% endif %}
              {% endfor %}
            {% endif %}
            {% if school_lunch.events %}
              {%- for event in school_lunch.events %}
                {% if event.start | string == (now().date()) | string %}
                  {{[ 
                      'On the Lunch menu today is ' ~ event.summary ~ '.',
                      'Today the lunch is ' ~ event.summary ~ ' which sounds good.',
                      'If you do not want ' ~ event.summary ~ ' let your parents know.',
                      'Looks like today is ' ~ event.summary ~ ' day at lunch.',
                      'The school menu shows ' ~ event.summary ~ ' day at lunch.',
                      event.summary ~ ' is what the school menu shows for lunch.',
                      'If you want ' ~ event.summary ~ ' for lunch just tell your father.'
                    ] | random }}
                  {% else %}
                    {{ [
                      "Unfortunately I am not sure what school lunch is going to be.",
                      "Looks like the school menu is blank.",
                      "Let me see. Oh. right. I have no idea what is for lunch at school today.",
                      "There appears to be a bit of a kerfuffle so I am unable to tell you what is on the lunch menu.",
                      "In terms of what is for lunch it appears we are going to have to do this the old fashion way since I cannot find todays menu.",
                      "Based on my information I think you might want to ask your father to make your lunch.",
                      "For lunch at school it appears to be whatever you take."
                      ] | random }}
                    {{ [
                      "A peanut butter sandwich sounds tasty.",
                      "You could always just roll the dice and choose from what they have today.",
                      "Maybe a spicy cheese sammie?",
                      "There is always cheese and crackers.",
                      "I am sure you father will sort it out.",
                      "So I guess go ask your father."
                      ] | random }}
                  
                {% endif %}
              {% endfor %}
            {% endif %}
          school_tomorrow: >
            {% if school.events %}
              {%- for event in school.events if as_timestamp(event.start) | timestamp_custom("%Y-%m-%d",true) == as_timestamp(now().date() + timedelta(days=1)) | timestamp_custom("%Y-%m-%d",true) %}
                {% if event.summary is defined and event.summary == 'School Day' %}
                  {{ ['Tomorrow is a school day.', 'There is school on the calendar for tomorrow.', 'It appears you have school tomorrow.'] | random }} 
                {% else %}
                  {{ ['Tomorrow is not a school day.', 'There is no school on the calendar for tomorrow.', 'It appears you do not have school tomorrow.'] | random }}
                {% endif %}
                {% if event.description is defined %}
                  {% if '#firstday' in event.description %}
                    And it is the first day of a new school year. so that is exciting! Right?
                  {% elif '#lastday' in event.description %}
                    You have made it to the last day of the school year.
                  {% elif '#secondsemester' in event.description %}
                    Christmas break is over. Back to work tomorrow. 
                  {% elif '#winterbreakstarts' in event.description %}
                    One more day until Winter Break starts!
                  {% elif '#springbreakstarts' in event.description %}
                    One more day until Spring break starts!
                  {% elif '#digital' in event.description %}
                    {{ ['But it is a digital learning day.','And it is a Digital Learning Day.','But you get to do it from home since it is digital learning.'] | random }}
                  {% else %}
        
                  {% endif %}
                {% endif %}
              {% endfor %}
              {% if school_lunch.events %}
              {%- for event in school_lunch.events %}
                  {% if event.start | string == (now().date() + timedelta(days=1)) | string %}
                    {{[ 
                      'On the Lunch menu tomorrow is ' ~ event.summary ~ '.',
                      'Tomorrow the lunch is ' ~ event.summary ~ ' which sounds good.',
                      'If you do not want ' ~ event.summary ~ ' let your parents know.',
                      'Looks like tomorrow is ' ~ event.summary ~ ' day at lunch.',
                      'The school menu shows it is ' ~ event.summary ~ ' day tomorrow.',
                      event.summary ~ ' is what the school menu shows for lunch tomorrow.',
                      'If you want ' ~ event.summary ~ ' for lunch tomorrow just tell your father.'
                    ] | random }}
                  {% else %}
                    {{ [
                      "Unfortunately I am not sure what school lunch is going to be.",
                      "Looks like the school menu is blank.",
                      "Let me see. Oh. right. I have no idea what is for lunch at school tomorrow.",
                      "There appears to be a bit of a kerfuffle so I am unable to tell you what is on the lunch menu tomorrow.",
                      "In terms of what is for lunch it appears we are going to have to do this the old fashion way since I cannot find tomorrows menu.",
                      "Based on my information I think you might want to ask your father to make your lunch tomorrow.",
                      "For lunch at school it appears to be whatever you take tomorrow."
                      ] | random }}
                    {{ [
                      "A peanut butter sandwich sounds tasty.",
                      "You could always just roll the dice and choose from what they have tomorrow.",
                      "Maybe a spicy cheese sammie?",
                      "There is always cheese and crackers.",
                      "I am sure you father will sort it out tomorrow.",
                      "So I guess ask your father in the morning."
                      ] | random }}
                  {% endif %}
                {% endfor %}
              {% endif %}
            {% endif %}
      - service: script.cleanup_text
        data:
          message: >
            {{school_tomorrow}} 
        response_variable: "cleaned_school_tomorrow" 
      - service: script.cleanup_text
        data:
          message: >
            {{school_today_p}} 
        response_variable: "cleaned_school_today_p"
      - service: script.cleanup_text
        data:
          message: >
            {{school_today}} 
        response_variable: "cleaned_school_today"  
      - variables: 
          school_info: >
            {"school_today":"{{cleaned_school_today.text}}","school_tomorrow":"{{cleaned_school_tomorrow.text}}","school_today_p":"{{cleaned_school_today_p.text}}","is_school_day":"{{is_school_day}}"}
      - stop: "Alright. Im done."
        response_variable: "school_info"

  get_school_lunch_info:
    sequence:  
    - service: calendar.get_events
      target:
        entity_id: calendar.school_lunch
      data:
        start_date_time: >
          {{ now().replace(hour=0, minute=0, second=0) }}
        end_date_time: >
          {{ now().replace(hour=11, minute=59, second=59) }}
      response_variable: agenda_today
    - service: calendar.get_events
      target:
        entity_id: calendar.school_lunch
      data:
        start_date_time: >
          {{ now().replace(hour=00, minute=00, second=00) + timedelta(days=1) }}
        end_date_time: >
          {{ now().replace(hour=11, minute=59, second=59) + timedelta(days=1) }}
      response_variable: agenda_tomorrow
    - variables:
        lunch_today: >
          {% if agenda_today['calendar.school_lunch'].events %}
            {%- for event in agenda_today['calendar.school_lunch'].events %}
              {% if event.start | string == (now().date()) | string and now().hour < 12 %}
                {{[ 
                  'On the Lunch menu today is ' ~ event.summary ~ '.',
                  'Today the lunch is ' ~ event.summary ~ ' which sounds good.',
                  'If you do not want ' ~ event.summary ~ ' let your parents know.',
                  'Looks like today is ' ~ event.summary ~ ' day at lunch.',
                  'The school menu shows ' ~ event.summary ~ ' day at lunch.',
                  event.summary ~ ' is what the school menu shows for lunch.',
                  'If you want ' ~ event.summary ~ ' for lunch just tell your father.',
                ] | random }}
              {% elif event.start | string == (now().date()) | string and now().hour > 12 %}
                
              
              {% else %}
                {{ [
                  "Unfortunately I am not sure what school lunch is going to be.",
                  "Looks like the school menu is blank.",
                  "Let me see. Oh. right. I have no idea what is for lunch at school today.",
                  "There appears to be a bit of a kerfuffle so I am unable to tell you what is on the lunch menu.",
                  "In terms of what is for lunch today it appears we are going to have to do this the old fashion way since the menu I refer to is blank.",
                  "Based on my information I think you might want to ask your father to make your lunch.",
                  "For lunch at school it appears to be whatever you take since there is nothing on the menu."
                  ] | random }}
              {% endif %}
            {% endfor %}
          {% endif %}
        lunch_tomorrow: >
          {% if agenda_tomorrow['calendar.school_lunch'].events %}
            {%- for event in agenda_tomorrow['calendar.school_lunch'].events %}
              {% if event.start | string == (now().date() + timedelta(days=1)) | string %}
                {{[ 
                  'On the Lunch menu tomorrow is ' ~ event.summary ~ '.',
                  'Tomorrow the lunch is ' ~ event.summary ~ ' which sounds good.',
                  'If you do not want ' ~ event.summary ~ ' tomorrow for lunch let your parents know.',
                  'Looks like tomorrow is ' ~ event.summary ~ ' day at lunch.',
                  'The school menu shows it is ' ~ event.summary ~ ' day tomorrow.',
                  event.summary ~ ' is what the school menu shows for lunch tomorrow.',
                  'If you want ' ~ event.summary ~ ' for lunch tomorrow just tell your father.'
                ] | random }}
              {% else %}
                {{ [
                  "Unfortunately I am not sure what school lunch is going to be.",
                  "Looks like the school menu is blank.",
                  "Let me see. Oh. right. I have no idea what is for lunch at school tomorrow.",
                  "There appears to be a bit of a kerfuffle so I am unable to tell you what is on the lunch menu tomorrow.",
                  "In terms of what is for lunch tomorrow it appears we are going to have to do this the old fashion way since the menu is blank.",
                  "Based on my information I think you might want to ask your father to make your lunch tomorrow.",
                  "For lunch at school it appears to be whatever you take tomorrow since there is nothing on the menu."
                  ] | random }}
              {% endif %}
            {% endfor %}
          {% endif %}
    - service: script.cleanup_text
      data:
        message: >
          {{lunch_today}} 
      response_variable: "cleaned_lunch_today" 
    - service: script.cleanup_text
      data:
        message: >
          {{lunch_tomorrow}} 
      response_variable: "cleaned_lunch_tomorrow"
    - variables:
        lunch_menu: >
          {"today":"{{cleaned_lunch_today.text}}","tomorrow":"{{cleaned_lunch_tomorrow.text}}"}
    - stop: "Alright. Im done."
      response_variable: "lunch_menu"

  digital_learning_day:
    sequence:
    - condition: template
      value_template: >
        {{ 'Digital Learning' in states('sensor.school_event') }}
    - service: input_boolean.turn_on
      entity_id: input_boolen.school_is_digital
    
  school_in_session:
    sequence:
    - condition: state
      entity_id: input_boolean.school_in_session
      state: 'off'
    - service: input_boolean.turn_on
      entity_id: input_boolen.school_in_session

  school_year_over:
    sequence:
    - condition: state
      entity_id: input_boolean.school_in_session
      state: 'on'
    - condition: template
      value_template: >
        {{ states('input_datetime.school_last_day') == now().strftime("%Y-%m-%d") }}
    - service: input_boolean.turn_off
      entity_id: input_boolen.school_in_session

#   rex_manning_audio:
#     sequence:
#     - condition: state
#       entity_id: input_boolean.audible_notifications
#       state: 'on'
#     - condition: state
#       entity_id: binary_sensor.family_home
#       state: "on"
#     - service: media_player.volume_set
#       data_template:
#         entity_id: media_player.ha_blue
#         volume_level: .4
#     - service: media_player.play_media
#       entity_id: media_player.ha_blue
#       data:
#         media_content_id: /media/music/Rex_Manning_-_Say_No_More_Mon_Amour.mp3
#         media_content_type: "music"

#   digital_learning_notification:
#     sequence:
#     - condition: state
#       entity_id: group.people
#       state: 'home'
#     - service: script.status_annc
#       data_template:
#         who: '{{ states.sensor.room_presence.state }}'
#         call_interuption: 1
#         speech_message: "Skylar, digital learning will begin in about thirty minutes. I have turned on the lighting around your desk."

#   class_alarm:
#     sequence:
#     - service: script.status_annc
#       data_template:
#         who: '{{ states.sensor.room_presence.state }}'
#         call_interuption: 1
#         speech_message: >
#           {{ class }} starts in two minutes.
#     - service: script.text_notify
#       data:
#         who: 'parents'
#         message: >
#           {{ class }} starts in two minutes.

#   save_current_ha_version:
#     sequence:
#       - service: mqtt.publish
#         data:
#           topic: house/ha/version
#           payload: "{{ states('sensor.home_assistant_website') }}"
#           retain: true

  skylar_good_night:
    sequence:
    - variables:
        awake_for: >
          {% set time = now().date() | string + " " + states('input_datetime.skylar_awake_at') %}
          {{ relative_time(as_datetime(time)) }}
    - service: script.get_tts_greetings
      response_variable: "greetings"
    - service: script.get_school_info
      response_variable: "school_info"
    - variables:
        message: >
          {{ greetings.general }} 
          
          {{ ["Got your jim jams on I see.",
              "Is that what you are planning to sleep in?",
              "You brushed your teeth right?",
              "Did you read for 20 minutes?"
              "Is it already time to kip down for the night?"
            ] | random }}
          {{ ["Anyway.",
              "Right.",
              "Well then. "
            ] | random }}
          {{ [ 'I have initiated your bedtime routine. ',
          'I just kicked off your bedtime program. ',
          'Initiating Bed time protocol.'
          ] | random }} 
          {{ [ "Which is good. Because",
              "Blimey! What were you doing today?",
              "Wait. This can not be right.",
              "Listen. Did you know ",
              "Well Look at that."
           ] | random }}          
          it appears you have been awake for {{ awake_for }}.

          {{ school_info.school_tomorrow}}

          {{ school_info.school_day_tomorrow}}

          {{ school_info.lunch_tomorrow}}

          {{ ["Tomorrow might be a busy one.",
              "Looks like tomorrow will be a fun day.",
              "I hope you are ready for tomorrow.",
              "Exciting day waiting for you tomorrow it seems." 
            ] | random }}

          {{ [ 'I have set your alarm according to your schedule tomorrow. ',
          'I have adjusted your alarm for the morning. ',
          'I went ahead and made sure your alarm is ready.'
          ] | random }} 
          
          {{ [ 'Good night. ',
              'Sleep well. ',
              'Sweet dreams. '
            ] | random }}
    - service: script.cleanup_text
      data:
        message: >
          {{ message }}
      response_variable: "cleaned_briefing"
    - service: media_player.volume_set
      data:
        entity_id:
        - media_player.skylars_bedroom_speaker
        - media_player.skylars_echo
        volume_level: >
          {{ states('input_number.skylar_room_notification_volume') | float}}
    - service: script.local_audio
      data:
        media: >
          {{ [ 
            "/media/disney/KissGoodnight_short.mp3"
            ] | random }}
        volume: .30
        speaker: skylars_bedroom
    - delay: "00:00:03"
    - service: script.speech_engine
      data: 
        who: skylars_bedroom
        type: priority
        message: >
          {{ cleaned_briefing.text }}
    - service: scene.turn_on
      target:
        entity_id: scene.skylar_bedtime
    - service: input_select.select_option
      target:
        entity_id: input_select.skylar_is_with
      data:
        option: Self
    - if:
      - condition: state
        entity_id: input_boolean.skylar_bedtime_music
        state: 'on'
      then:
      - delay:
          seconds: 60
      - service: script.bedtime_music_echo


  skylar_good_night_music:
    sequence:
      - service: media_player.volume_set
        data:
          entity_id:
          - media_player.skylars_bedroom_speaker
          - media_player.skylars_echo
          volume_level: >
            {{ states('input_number.skylar_room_notification_volume') | float}}
      - delay:
          seconds: 30
      - service: script.bedtime_music_echo

  skylar_good_night_scene:
    sequence:
      - service: scene.turn_on
        target:
          entity_id: scene.skylar_bedtime
      - service: input_select.select_option
        target:
          entity_id: input_select.skylar_is_with
        data:
          option: Self
      - service: media_player.volume_set
        data:
          entity_id:
          - media_player.skylars_bedroom_speaker
          - media_player.skylars_echo
          volume_level: >
            {{ states('input_number.skylar_room_notification_volume') | float}}

  # alexa_skylar_good_night:
  #   sequence:
  #     - service: script.speech_engine
  #       data: 
  #         who: skylars_bedroom
  #         message: >
  #           {{ [ 'Oh, I guess it is that time. ',
  #           'Another day done. ',
  #           'Is it that time already? ',
  #           'I was just about to ask if it was time.',
  #           'I agree.'
  #           ] | random }} 
  #           {% if is_state('sensor.school_tomorrow', 'on') %} 
  #             {{ [ 'It looks like you have school tomorrow. ',
  #               'You do have to get up early tomorrow for school.',
  #               'Perfect timing. After all, you want to be ready for school tomorrow.'
  #             ] | random }}   
  #           {% else %}
  #             {% set month=states("sensor.date").split('-')[1] | int %}
  #             {%- if is_state('input_boolean.school_in_session', 'off') -%}
  #               {{ [ 'But do not worry. Tomorrow is another day of summer vacation. ',
  #                   'You are still on summer break tomorrow though.'
  #                 ] | random }} 
  #             {% else %}
  #               But it appears you do not have school tomorrow
  #             {% endif %} 
  #               {{ [ 'so you can sleep in late. ',
  #                   'so you could sleep in a little later. ',
  #                   'so there is not a reason to get up early. ',
  #                   'so we can sleep in. '
  #                 ] | random }} 
  #           {% endif %} 
  #           {% if states.sensor.school_start_days2go.state | int < 10 and states.sensor.school_start_days2go.state | int > 1 -%}
  #             {{ [ 'I hate to say it, but ',
  #                 'Unfortunately,',
  #                 'All good things must come to an end.'
  #               ] | random }}
  #             There are only {{ states.sensor.school_start_days2go.state }} days  
  #             {{ [ 'left of summer vacation. ',
  #                 ' left of summer break.',
  #                 'Until School starts again.'
  #               ] | random }}
  #           {% elif states.sensor.school_start_days2go.state | int == 1 -%}
  #             Tomorrow is the first day of school. Are you ready? 
  #           {%- endif %}
  #           {% if states.sensor.school_end_days2go.state | int < 15 and states.sensor.school_end_days2go.state | int > 0 -%}
  #           {{ [ 'School is almost over for the year.',
  #               'You have made it to the end of the school year.',
  #               'You are almost done with school.'
  #             ] | random }}
  #           There are only {{ states.sensor.school_end_days2go.state }} days  
  #           {{ [ 'left in the school year ',
  #               ' left of school.',
  #               'Until the last day of school.'
  #             ] | random }}
  #           {% elif states.sensor.school_end_days2go.state | int == 0 -%}
  #             Tomorrow is the first day of summer. Are you ready? 
  #           {%- endif %}
  #             {{ [ 'Good night Skylar. ',
  #               'Sleep well Skylar. ',
  #               'Sweet dreams Skylar. '
  #             ] | random }}
  #     - service: scene.turn_on
  #       target:
  #         entity_id: scene.skylar_bedtime
  #     - service: input_select.select_option
  #       target:
  #         entity_id: input_select.skylar_is_with
  #       data:
  #         option: Self
  #     - delay:
  #         seconds: 15
  #     - service: script.bedtime_music

#   meeting_time:
#     sequence:
#       - service: script.speech_engine
#         data: 
#           who: master_bedroom
#           message: >
#             {{states('sensor.tts_confirmation') }}
#       - service: switch.turn_on
#         entity_id: switch.on_air
#       - delay:
#           seconds: 7
#       - service: script.speech_engine
#         data: 
#           who: master_bedroom
#           message: >
#             {{ [
#                 'Meeting mode has been enabled. ',
#                 'Your status has been updated. ',
#                 'I set the meeting indicator on. '
#                 ] | random }}

#   meeting_time_over:
#     sequence:
#       - service: switch.turn_off
#         entity_id: switch.on_air
#       - delay:
#           seconds: 7
#       - service: script.speech_engine
#         data: 
#           who: master_bedroom
#           message: >
#             {{ [
#                 'Meeting mode has been disabled. ',
#                 'Your status has been updated. ',
#                 'I set the meeting indicator off. '
#                 ] | random }}
             
      
      

# rest_command:
#   new_version_github_issue:
#     url: https://api.github.com/repos/thejeffreystone/home-assistant-configuration/issues
#     method: POST
#     headers:
#       Authorization: !secret github_issue_token
#     payload: '{"title":"Home-Assistant {{ version }} available","body":"Home-Assistant {{ version }} is now available"}'