- id: '1659356428735'
  alias: Kitchen Lighting
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.kitchen_occupied
    from: 'off'
    to: 'on'
    id: Light_Needed
  - platform: state
    entity_id:
    - binary_sensor.kitchen_occupied
    from: 'on'
    to: 'off'
    for:
      hours: 0
      minutes: 1
      seconds: 0
    id: lights_dim
  - platform: state
    entity_id:
    - binary_sensor.kitchen_occupied
    from: 'on'
    to: 'off'
    for:
      hours: 0
      minutes: 5
      seconds: 0
    id: light_not_needed
  condition: []
  action:
  - service: script.get_room_lights
    data:
      room: kitchen
    response_variable: room
  - choose:
    - conditions:
      - condition: trigger
        id: Light_Needed
      - condition: state
        entity_id: input_boolean.audible_notifications
        state: 'on'
      sequence:
      - service: light.turn_on
        data:
          brightness_pct: 100
        target:
          entity_id: '{{room.lights}}'
    - conditions:
      - condition: trigger
        id: Light_Needed
      - condition: state
        entity_id: input_boolean.audible_notifications
        state: 'off'
      sequence:
      - service: light.turn_on
        data:
          brightness_pct: 50
        target:
          entity_id: '{{room.lights}}'
    - conditions:
      - condition: trigger
        id: lights_dim
      sequence:
      - service: light.turn_on
        data:
          brightness_pct: 20
        target:
          entity_id: '{{room.lights}}'
    - conditions:
      - condition: trigger
        id: light_not_needed
      sequence:
      - service: light.turn_off
        target:
          entity_id: '{{room.lights}}'
    default: []
  mode: restart
- id: '1659356561696'
  alias: Bar Lighting
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.bar_motion
    from: 'off'
    to: 'on'
    id: light_needed
  - platform: state
    entity_id:
    - binary_sensor.bar_motion
    from: 'on'
    to: 'off'
    for:
      hours: 0
      minutes: 10
      seconds: 0
    id: light_not_needed
  condition: []
  action:
  - choose:
    - conditions:
      - condition: state
        entity_id: light.bar_lights
        state: 'off'
      - condition: trigger
        id: light_needed
      sequence:
      - service: scene.turn_on
        data: {}
        target:
          entity_id: scene.bar_normal
    - conditions:
      - condition: trigger
        id: light_not_needed
      sequence:
      - service: scene.turn_on
        data: {}
        target:
          entity_id: scene.bar_dark
    default: []
  mode: restart
- id: '1659356679430'
  alias: Pantry Lighting
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.pantry_motion
    from: 'off'
    to: 'on'
    id: light_needed
  - platform: state
    entity_id:
    - binary_sensor.kitchen_door_contact
    from: 'off'
    to: 'on'
    id: Door open
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - Door open
      - condition: state
        entity_id: input_boolean.audible_notifications
        state: 'off'
      sequence:
      - service: scene.turn_on
        data: {}
        target:
          entity_id: scene.pantry_normal
    default: []
  mode: restart
- id: '1659367047240'
  alias: Audible Notifications
  description: ''
  trigger:
  - platform: time
    at: input_datetime.audible_notification_on
    id: 'on'
  - platform: time
    at: input_datetime.audible_notification_off
    id: 'off'
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: 'on'
      - condition: state
        entity_id: binary_sensor.family_home
        state: 'on'
      sequence:
      - service: input_boolean.turn_on
        data: {}
        target:
          entity_id: input_boolean.audible_notifications
    - conditions:
      - condition: trigger
        id: 'off'
      - condition: state
        entity_id: input_boolean.audible_notifications
        state: 'on'
      sequence:
      - service: input_boolean.turn_off
        data: {}
        target:
          entity_id: input_boolean.audible_notifications
    default: []
  mode: single
- id: '1659551877212'
  alias: Kats Closet
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.kats_closet_door
    from: 'off'
    to: 'on'
    id: opened
  - platform: state
    entity_id:
    - binary_sensor.kats_closet_door
    from: 'on'
    to: 'off'
    id: closed
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: opened
      sequence:
      - service: light.turn_on
        data:
          brightness: 255
        target:
          entity_id: light.kats_closet_light
    - conditions:
      - condition: trigger
        id: closed
      sequence:
      - service: light.turn_off
        data: {}
        target:
          entity_id: light.kats_closet_light
    default: []
  mode: single
- id: '1662424449450'
  alias: Dungeon Lighting
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.dungeon_motion
    - binary_sensor.basement_access_door
    - binary_sensor.exercise_motion
    from: 'off'
    to: 'on'
    id: motion
  - platform: state
    entity_id:
    - binary_sensor.exercise_motion
    from: 'off'
    to: 'on'
    id: exercise_motion
  - platform: state
    entity_id:
    - binary_sensor.dungeon_motion
    from: 'on'
    to: 'off'
    for:
      hours: 0
      minutes: 10
      seconds: 0
    id: no_motion
  - platform: state
    entity_id:
    - binary_sensor.exercise_motion
    from: 'on'
    to: 'off'
    for:
      hours: 0
      minutes: 30
      seconds: 0
    id: no_exercise_motion
  - platform: state
    entity_id:
    - switch.dungeon_light
    from: 'off'
    to: 'on'
    id: lights_on
  - platform: state
    entity_id:
    - switch.dungeon_light
    from: 'on'
    to: 'off'
    id: lights_off
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: motion
      - condition: state
        entity_id: light.dungeon_door_light
        state: 'off'
      sequence:
      - service: light.turn_on
        data:
          brightness_pct: 100
          color_temp: 298
        target:
          entity_id: light.dungeon_door_light
      - service: switch.turn_on
        entity_id: switch.exercise_lights
    - conditions:
      - condition: trigger
        id: exercise_motion
      - condition: state
        entity_id: switch.exercise_lights
        state: 'off'
      sequence:
      - service: switch.turn_on
        entity_id: switch.exercise_lights
    - conditions:
      - condition: state
        entity_id:
        - input_boolean.chimichanga_mode
        state: 'off'
      - condition: trigger
        id: no_motion
      - condition: or
        conditions:
        - condition: state
          entity_id: light.dungeon_door_light
          state: 'on'
      sequence:
      - service: light.turn_off
        data: {}
        target:
          entity_id: light.dungeon_door_light
    - conditions:
      - condition: state
        entity_id:
        - input_boolean.chimichanga_mode
        state: 'off'
      - condition: trigger
        id: no_exercise_motion
      - condition: or
        conditions:
        - condition: state
          entity_id: switch.exercise_lights
          state: 'on'
      sequence:
      - service: switch.turn_off
        entity_id: switch.exercise_lights
    default: []
  mode: restart
- id: e1cb39dc-0423-11eb-adc1-0242ac120002
  alias: Master Bedroom Lights Needed
  trigger:
  - entity_id: binary_sensor.master_bedroom_motion
    from: 'off'
    platform: state
    to: 'on'
    id: light_needed
  - entity_id:
    - binary_sensor.master_bedroom_motion
    from: 'on'
    platform: state
    to: 'off'
    for:
      hours: 0
      minutes: 5
      seconds: 0
    id: light_not_needed
  - platform: time
    at: '23:00:00'
    id: lights_out
  - platform: state
    entity_id:
    - binary_sensor.master_bedroom_bath_door_contact
    from: 'on'
    to: 'off'
    id: bath_occupied
  - platform: state
    entity_id:
    - binary_sensor.master_bedroom_bath_door_contact
    from: 'off'
    to: 'on'
    for:
      hours: 0
      minutes: 10
      seconds: 0
    id: bath_vacant
  - platform: state
    entity_id:
    - input_boolean.light_override
    from: 'off'
    to: 'on'
    id: brighter
  - platform: state
    entity_id:
    - input_boolean.light_override
    from: 'on'
    to: 'off'
    id: darker
  action:
  - choose:
    - conditions:
      - condition: or
        conditions:
        - condition: trigger
          id: light_needed
        - condition: trigger
          id: brighter
      - condition: state
        entity_id: sun.sun
        state: above_horizon
      - condition: state
        entity_id: group.master_bedroom
        state: 'off'
      - condition: or
        conditions:
        - condition: numeric_state
          entity_id: sensor.master_bedroom_lux
          below: 50
        - condition: numeric_state
          entity_id: sensor.master_bedroom_lux
          above: 65000
      sequence:
      - service: script.master_bedroom_lights_w_level
        data:
          level: 255
    - conditions:
      - condition: or
        conditions:
        - condition: trigger
          id: light_needed
        - condition: trigger
          id: brighter
      - condition: state
        entity_id: sun.sun
        state: below_horizon
      - condition: or
        conditions:
        - condition: time
          before: '23:00:00'
          after: '17:00:00'
        - condition: and
          conditions:
          - condition: time
            before: 09:00:00
            after: 06:00:00
          - condition: state
            entity_id: script.master_bedroom_morning_wakeup_lighting
            state: 'off'
      - condition: state
        entity_id: input_boolean.light_override
        state: 'off'
      sequence:
      - service: script.master_bedroom_lights_w_level
        data:
          level: 255
    - conditions:
      - condition: or
        conditions:
        - condition: trigger
          id: light_needed
        - condition: trigger
          id: brighter
      - condition: state
        entity_id: sun.sun
        state: below_horizon
      - condition: time
        after: '23:00:00'
        before: 06:00:00
      - condition: state
        entity_id: input_boolean.light_override
        state: 'off'
      sequence:
      - service: scene.turn_on
        entity_id: scene.master_bedroom_nightlight
    - conditions:
      - condition: trigger
        id: light_not_needed
      - condition: state
        entity_id: group.master_bedroom
        state: 'on'
      - condition: state
        entity_id:
        - script.master_bedroom_morning_wakeup_lighting
        state: 'off'
      - condition: state
        entity_id: input_boolean.light_override
        state: 'off'
      sequence:
      - service: scene.turn_on
        entity_id: scene.master_bedroom_off
    - conditions:
      - condition: trigger
        id: lights_out
      - condition: state
        entity_id: group.master_bedroom
        state: 'on'
      - condition: state
        entity_id:
        - script.master_bedroom_morning_wakeup_lighting
        state: 'off'
      - condition: state
        entity_id: input_boolean.light_override
        state: 'off'
      sequence:
      - service: scene.turn_on
        entity_id: scene.master_bedroom_off
    - conditions:
      - condition: trigger
        id: bath_occupied
      sequence:
      - service: switch.turn_on
        data: {}
        target:
          entity_id: switch.master_bath_lights
    - conditions:
      - condition: trigger
        id: bath_vacant
      sequence:
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.master_bath_lights
    - conditions:
      - condition: trigger
        id: darker
      - condition: state
        entity_id:
        - script.master_bedroom_morning_wakeup_lighting
        state: 'off'
      - condition: state
        entity_id: group.master_bedroom
        state: 'on'
      sequence:
      - service: scene.turn_on
        entity_id: scene.master_bedroom_off
    default: []
  initial_state: true
- id: '1662943600604'
  alias: Stair Lighting
  description: ''
  trigger:
  - platform: state
    entity_id:
    - group.stairs_occupancy
    from: 'off'
    to: 'on'
    id: motion
  - platform: state
    entity_id:
    - binary_sensor.stairs_motion_top_occupancy
    from: 'on'
    to: 'off'
    id: no_motion_top
  - platform: state
    entity_id:
    - binary_sensor.stairs_motion_bottom
    from: 'on'
    to: 'off'
    id: no_motion_bottom
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: motion
      sequence:
      - service: light.turn_on
        data:
          brightness: 255
          color_temp: 249
        target:
          entity_id: light.stair_lights
    - conditions:
      - condition: or
        conditions:
        - condition: trigger
          id: no_motion_top
        - condition: trigger
          id: no_motion_bottom
        alias: 'If either sensors clear, turn off lights '
      - condition: and
        conditions:
        - condition: state
          state: 'off'
          entity_id: binary_sensor.stairs_motion_top_occupancy
        - condition: state
          entity_id: binary_sensor.stairs_motion_bottom
          state: 'off'
        alias: Make sure both sensors are clear
      sequence:
      - service: light.turn_off
        data: {}
        target:
          entity_id: light.stair_lights
    alias: Turn on and off Stair Lights
  mode: restart
- id: '1663251471668'
  alias: Studio Wax Warmer
  description: ''
  trigger:
  - platform: state
    entity_id:
    - switch.studio_airfreshener
    from: 'off'
    to: 'on'
    id: wax_on
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: timer.studio_wax_warmer
    id: wax_off
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: wax_on
      sequence:
      - service: timer.start
        data: {}
        target:
          entity_id: timer.studio_wax_warmer
    - conditions:
      - condition: trigger
        id: wax_off
      sequence:
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.studio_airfreshener
  mode: single
- id: '1663671389098'
  alias: Studio Lighting
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.roomsense_iq_presence
    - binary_sensor.slacker_labs_motion
    from: 'off'
    to: 'on'
    id: motion
  - platform: state
    entity_id:
    - sensor.jeff_location
    to: studio
    for:
      hours: 0
      minutes: 0
      seconds: 30
    id: present
  - platform: state
    entity_id:
    - binary_sensor.studio_occupied
    from: studio
    id: done
  - platform: state
    entity_id:
    - person.jeffrey
    to: not_home
    id: gone
  - platform: state
    entity_id:
    - binary_sensor.roomsense_iq_presence
    from: 'on'
    to: 'off'
    id: no_motion
  - platform: state
    entity_id: input_select.studio_mode
    to: Work
    id: work_mode
  - platform: state
    entity_id: input_select.studio_mode
    to: Weekend
    id: weekend_mode
  - platform: state
    entity_id:
    - input_select.studio_mode
    to: Normal
    id: normal_mode
  - platform: state
    entity_id:
    - input_select.studio_mode
    to: Streaming
    id: streaming_mode
  - platform: state
    entity_id: input_select.studio_mode
    to: Cleaning
    id: clean_mode
  - platform: state
    entity_id: input_select.studio_mode
    to: Film
    id: film_mode
  - platform: time
    at: 00:00:00
    id: midnight
  - platform: time
    at: 09:00:00
    id: work_day_start
  - platform: state
    entity_id:
    - input_select.studio_mode
    to: Sleep
    id: sleep_mode
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: normal_mode
      sequence:
      - service: scene.turn_on
        target:
          entity_id: scene.studio_night_mode
        metadata: {}
    - conditions:
      - condition: trigger
        id:
        - weekend_mode
      sequence:
      - service: scene.turn_on
        target:
          entity_id: scene.studio_weekend_mode
        metadata: {}
    - conditions:
      - condition: trigger
        id: clean_mode
      sequence:
      - service: scene.turn_on
        target:
          entity_id: scene.studio_clean_time
        metadata: {}
    - conditions:
      - condition: trigger
        id: work_mode
      sequence:
      - service: scene.turn_on
        target:
          entity_id: scene.work_time
        metadata: {}
    - conditions:
      - condition: trigger
        id:
        - streaming_mode
      sequence:
      - service: scene.turn_on
        target:
          entity_id: scene.streaming_mode
        metadata: {}
    - conditions:
      - condition: trigger
        id: film_mode
      sequence:
      - service: scene.turn_on
        target:
          entity_id: scene.film_time
        metadata: {}
    - conditions:
      - condition: template
        value_template: '{{ states(''input_select.studio_mode'') not in [''Film'',''Streaming'']}}'
      - condition: or
        conditions:
        - condition: trigger
          id: present
        - condition: trigger
          id: motion
        - condition: trigger
          id: work_day_start
      sequence:
      - if:
        - condition: state
          entity_id: binary_sensor.jeff_workday
          state: 'on'
        - condition: time
          after: 08:59:00
          before: '17:30:00'
        - condition: state
          entity_id: person.jeffrey
          state: home
        - condition: template
          value_template: '{{ states(''input_select.studio_mode'') not in [''Film'',''Streaming'']}}'
        then:
        - service: input_select.select_option
          data:
            option: Work
          target:
            entity_id: input_select.studio_mode
        else:
        - if:
          - condition: state
            entity_id: person.jeffrey
            state: home
          - condition: state
            entity_id: binary_sensor.lights_out
            state: 'on'
          - condition: template
            value_template: '{{ states(''input_select.studio_mode'') not in [''Film'',''Streaming'']}}'
          then:
          - service: input_select.select_option
            data:
              option: Normal
            target:
              entity_id: input_select.studio_mode
          else:
          - service: input_select.select_option
            data:
              option: Weekend
            target:
              entity_id: input_select.studio_mode
    - conditions:
      - condition: template
        value_template: '{{ is_state(''binary_sensor.studio_occupied'',''off'')}}'
      - condition: state
        entity_id: switch.3d_printer
        state: 'off'
      - condition: or
        conditions:
        - condition: trigger
          id: gone
        - condition: trigger
          id: done
        - condition: trigger
          id: midnight
      sequence:
      - service: input_select.select_option
        data:
          option: Sleep
        target:
          entity_id: input_select.studio_mode
    - conditions:
      - condition: trigger
        id: sleep_mode
      sequence:
      - service: script.studio_sleep
  mode: queued
- id: '1663678889161'
  alias: Outdoor Lighting
  description: ''
  trigger:
  - platform: sun
    event: sunset
    offset: 0
    id: sundown
  - platform: sun
    event: sunrise
    offset: 0
    id: sunup
  - platform: time
    at: '23:00:00'
    id: closing_time
  - platform: time
    at: 06:00:00
    id: wake_up
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: sundown
        alias: At Sundown
      sequence:
      - service: light.turn_on
        data: {}
        target:
          entity_id: light.outdoor_spotlights
      - service: switch.turn_on
        data: {}
        target:
          entity_id:
          - switch.deck_lights
      - if:
        - condition: state
          state: 'on'
          entity_id: binary_sensor.christmas_season
        then:
        - service: scene.turn_on
          data: {}
          target:
            entity_id: scene.front_porch_christmas
        - service: cover.close_cover
          entity_id:
          - cover.skylar_blinds_one
          - cover.master_bedroom_shade
        alias: Christmas Season
      - if:
        - condition: and
          conditions:
          - condition: state
            entity_id: binary_sensor.christmas_season
            state: 'off'
          - condition: state
            entity_id: binary_sensor.spooky_season
            state: 'off'
        then:
        - service: scene.turn_on
          data: {}
          target:
            entity_id: scene.front_porch_normal_lighting
        - service: cover.close_cover
          entity_id:
          - cover.curtain_left
          - cover.skylar_blinds_one
          - cover.master_bedroom_shade
        alias: Normal Lighting
      - if:
        - condition: state
          entity_id: input_boolean.vacation_mode
          state: 'on'
        then:
        - service: switch.turn_on
          data: {}
          target:
            entity_id: switch.driveway_light
        alias: Vacation Mode
      - if:
        - condition: state
          state: 'on'
          entity_id: binary_sensor.spooky_season
        then:
        - service: scene.turn_on
          data: {}
          target:
            entity_id: scene.front_porch_halloween
        - service: cover.close_cover
          entity_id:
          - cover.skylar_blinds_one
          - cover.master_bedroom_shade
        alias: Halloween Season
    - conditions:
      - condition: trigger
        id: sunup
        alias: At Sunrise
      sequence:
      - service: light.turn_off
        data: {}
        target:
          entity_id: light.outdoor_spotlights
      - service: light.turn_off
        data: {}
        target:
          entity_id: light.front_porch_lights
      - if:
        - condition: state
          entity_id: binary_sensor.family_home
          state: 'on'
        then:
        - service: cover.open_cover
          entity_id:
          - cover.curtain_left
          - cover.skylar_blinds_one
          - cover.master_bedroom_shade
      - service: switch.turn_off
        data: {}
        target:
          entity_id:
          - switch.pool_deck_lights
          - switch.deck_lights
          - switch.driveway_light
    - conditions:
      - condition: trigger
        id: closing_time
      sequence:
      - service: switch.turn_off
        data: {}
        target:
          entity_id:
          - switch.deck_lights
    - conditions:
      - condition: trigger
        id: wake_up
      - condition: state
        entity_id: input_boolean.vacation_mode
        state: 'on'
      sequence:
      - service: switch.turn_on
        data: {}
        target:
          entity_id:
          - switch.deck_lights
  mode: single
- id: '1663801951273'
  alias: Holiday Display
  description: ''
  trigger:
  - platform: sun
    event: sunrise
    offset: 0
    id: sunup
  - platform: sun
    event: sunset
    offset: -00:30:00
    id: sundown
  - platform: time
    at: '22:00:00'
    id: effects_off
  condition:
  - condition: state
    entity_id: input_boolean.holiday_mode
    state: 'on'
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: sundown
      sequence:
      - service: switch.turn_on
        data: {}
        target:
          entity_id:
          - switch.graveyard_one
          - switch.graveyard_two
          - switch.scene_2a
          - switch.scene_2b
          - switch.exterior_porch_left
          - switch.tp_link_smart_plug_8559_fog
          - switch.tp_link_smart_plug_8559_pumpkin_king
    - conditions:
      - condition: trigger
        id: sunup
      sequence:
      - service: switch.turn_off
        data: {}
        target:
          entity_id:
          - switch.graveyard_one
          - switch.graveyard_two
          - switch.scene_2a
          - switch.scene_2b
          - switch.tp_link_smart_plug_8559_pumpkin_king
          - switch.exterior_porch_left
    - conditions:
      - condition: trigger
        id: effects_off
      sequence:
      - service: switch.turn_off
        data: {}
        enabled: true
        target:
          entity_id: switch.tp_link_smart_plug_8559_fog
  mode: single
- id: '1664669337778'
  alias: Pottery Studio Lighting
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.pot_studio_motion
    - binary_sensor.cricut_desk_motion
    id: studio_motion
    from: 'off'
    to: 'on'
  - platform: state
    entity_id:
    - input_boolean.chimichanga_mode
    from: 'off'
    to: 'on'
    id: pot_time
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: timer.pottery_lights
    id: times_up
  - platform: state
    entity_id:
    - input_boolean.chimichanga_mode
    from: 'on'
    to: 'off'
    id: shut_down
  - platform: state
    entity_id:
    - sensor.pot_light_button_action
    to: single
    id: wheel_light
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: studio_motion
      - condition: state
        entity_id: switch.pot_lights
        state: 'off'
      sequence:
      - service: switch.turn_on
        data: {}
        target:
          entity_id:
          - switch.pot_lights
          - switch.pottery_air_purifier
          - switch.exercise_lights
      - if:
        - condition: state
          entity_id: input_boolean.chimichanga_mode
          state: 'off'
        then:
        - service: timer.start
          data: {}
          target:
            entity_id: timer.pottery_lights
    - conditions:
      - condition: trigger
        id: times_up
      - condition: state
        entity_id: input_boolean.chimichanga_mode
        state: 'off'
      sequence:
      - service: light.turn_off
        data: {}
        target:
          entity_id: light.dungeon_door_light
      - service: switch.turn_off
        data: {}
        target:
          entity_id:
          - switch.pot_lights
          - switch.pottery_air_purifier
          - switch.exercise_lights
          - switch.pot_light
    - conditions:
      - condition: trigger
        id: pot_time
      sequence:
      - service: switch.turn_on
        data: {}
        target:
          entity_id:
          - switch.pot_lights
          - switch.exercise_lights
          - switch.pottery_air_purifier
      - service: light.turn_on
        data: {}
        target:
          entity_id: light.dungeon_door_light
      - delay: 00:00:03
      - if:
        - condition: state
          entity_id: input_boolean.chimichanga_mode
          state: 'on'
        then:
        - service: script.marauders_map_opens
          data: {}
    - conditions:
      - condition: trigger
        id: shut_down
      sequence:
      - service: timer.start
        data: {}
        target:
          entity_id: timer.pottery_lights
      - delay: 00:00:03
      - if:
        - condition: state
          entity_id: input_boolean.chimichanga_mode
          state: 'off'
        then:
        - service: script.marauders_map_closes
          data: {}
    - conditions:
      - condition: trigger
        id: wheel_light
      sequence:
      - service: switch.toggle
        data: {}
        target:
          entity_id: switch.pot_light
  mode: restart
- id: e1cb287a-0423-11eb-adc1-0242ac120002
  alias: Notification Volume Dim
  initial_state: true
  trigger:
  - platform: state
    entity_id: input_boolean.audible_notifications
    to: 'off'
  action:
  - service: media_player.volume_set
    data:
      entity_id:
      - media_player.kitchen_display
      - media_player.kitchen_echo
      volume_level: '{{ states(''input_number.tts_low_volume'') | float }}

        '
- id: e1cb27bc-0423-11eb-adc1-0242ac120002
  alias: Notification Volume Normal
  initial_state: true
  trigger:
  - platform: state
    entity_id: input_boolean.audible_notifications
    to: 'on'
  - platform: state
    entity_id: input_number.tts_volume
  - platform: state
    entity_id: input_number.tts_main_volume
  action:
  - service: media_player.volume_set
    data:
      entity_id:
      - media_player.kitchen_display
      - media_player.kitchen_echo
      - media_player.upstairs_speaker
      - media_player.croft_speaker
      - media_player.living_room_echo
      - media_player.master_bedroom_speaker
      - media_player.skylars_bedroom_speaker
      - media_player.skylars_bedroom_echo
      - media_player.studio_speaker
      volume_level: '{{ states(''input_number.tts_volume'') | float }}

        '
  - service: media_player.volume_set
    data:
      entity_id:
      - media_player.ha_blue
      volume_level: '{{ states(''input_number.tts_main_volume'') | float }}

        '
- id: e1cb17ea-0423-11eb-adc1-0242ac120002
  alias: Set Last Alexa Called Time
  initial_state: true
  trigger:
  - platform: state
    entity_id:
    - media_player.living_room_echo
    - media_player.skylars_room
    - media_player.slacker_labs_echo
    - media_player.master_bedroom_echo
    - media_player.basement_echo
    - media_player.theater_echo
  action:
  - service: input_datetime.set_datetime
    target:
      entity_id: input_datetime.last_time_alexa_called
    data:
      datetime: '{{ now().strftime(''%Y-%m-%d %H:%M:%S'') }}'
- id: a2f8621f-064b-4a4f-8414-44983848ff00
  alias: bias_lighting
  trigger:
  - platform: state
    entity_id: media_player.home_theater
    to: idle
    for: 00:00:05
    id: tv_on_late
  - platform: state
    entity_id: media_player.theater_tv
    to: 'on'
    id: tv_on
  - platform: state
    entity_id: media_player.theater_tv
    to: 'off'
    id: tv_off_late
  - platform: state
    entity_id: media_player.home_theater
    to: standby
    for: 00:00:05
    id: tv_off
  - platform: state
    entity_id: media_player.home_theater
    to: playing
    for: 00:00:30
    id: movie_time
  - platform: state
    entity_id: media_player.home_theater
    to: idle
    for: 00:00:30
    id: movie_over
  - platform: state
    entity_id: media_player.home_theater
    to: paused
    for: 00:00:05
    id: movie_paused
  - platform: state
    entity_id:
    - media_player.home_theater
    to: idle
    for:
      hours: 0
      minutes: 0
      seconds: 5
    id: appletv_on
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: tv_on
      - condition: state
        entity_id: light.theater
        state: 'off'
      sequence:
      - service: light.turn_on
        entity_id: light.theater
    - conditions:
      - condition: trigger
        id: tv_on_late
      - condition: state
        entity_id: light.theater
        state: 'off'
      sequence:
      - service: light.turn_on
        entity_id: light.theater
    - conditions:
      - condition: trigger
        id: tv_off
      sequence:
      - service: light.turn_off
        entity_id: light.theater
    - conditions:
      - condition: trigger
        id: tv_off_late
      sequence:
      - service: light.turn_off
        entity_id: light.theater
    - conditions:
      - condition: trigger
        id: movie_time
      sequence:
      - service: scene.turn_on
        entity_id: scene.theater_movie
      - service: script.adjust_audio
        data: {}
    - conditions:
        condition: or
        conditions:
        - condition: trigger
          id: movie_over
        - condition: trigger
          id: movie_paused
      sequence:
      - service: scene.turn_on
        entity_id: scene.theater_dim
    - conditions:
      - condition: trigger
        id:
        - appletv_on
        enabled: true
      - condition: state
        entity_id: binary_sensor.theater_tv_status
        state: 'on'
      sequence:
      - if:
        - condition: state
          entity_id: light.lytmi_neo3
          state: 'off'
        then:
        - service: light.turn_on
          data: {}
          target:
            device_id: 44c483d20dc039b802faf91ca36d5a20
        enabled: true
    default: []
  initial_state: true
- id: 9f783303-8715-4254-82a3-79ae9b042243
  alias: Theater Lighting
  trigger:
  - platform: state
    entity_id: binary_sensor.theater_motion
    to: 'on'
    id: motion
  - platform: state
    entity_id: media_player.theater_tv
    to: 'off'
    for: 00:10:00
    id: shut_down
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: motion
      - condition: state
        entity_id: light.theater_lights
        state: 'off'
      - condition: or
        conditions:
        - condition: numeric_state
          entity_id: sensor.theater_lux
          below: 50
        - condition: numeric_state
          entity_id: sensor.ltheater_lux
          above: 65000
      sequence:
      - service: scene.turn_on
        entity_id: scene.theater_dim
    - conditions:
      - condition: trigger
        id: shut_down
      sequence:
      - service: scene.turn_on
        entity_id: scene.theater_dark
    default: []
- id: 1feafed1-0de9-44a4-a2f0-e693bc637ea1
  alias: Master bedroom Wake Up
  initial_state: true
  trigger:
  - platform: time
    at: 06:00:00
  condition:
  - condition: state
    entity_id: input_boolean.vacation_mode
    state: 'off'
  action:
  - service: script.turn_on
    entity_id: script.master_bedroom_morning_wakeup_lighting
  - delay: 00:33:00
  - service: script.turn_off
    entity_id: script.master_bedroom_morning_wakeup_lighting
  - service: input_number.set_value
    data_template:
      entity_id: input_number.master_bedroom_wakeup
      value: 8.5
  - service: scene.turn_on
    entity_id: scene.master_bedroom_on
- id: 27b83e67-b509-427a-aa2f-1ce4bb7ad0ab
  alias: Sunset
  initial_state: true
  trigger:
  - platform: time
    at: '20:00:00'
  condition:
  - condition: state
    entity_id: input_boolean.vacation_mode
    state: 'off'
  action:
  - service: scene.turn_on
    entity_id: scene.master_bedroom_on
- id: daily_entity_refresh
  alias: Daily Entity Refresh
  trigger:
  - platform: time
    at: 04:30:00
  action:
  - service: homeassistant.update_entity
    entity_id: sensor.today_is
  - service: homeassistant.update_entity
    entity_id: sensor.holiday
- id: daily_entity_refresh2
  alias: Daily Entity Refresh2
  trigger:
  - platform: time
    at: '17:00:00'
  action:
  - service: homeassistant.update_entity
    entity_id: sensor.school_tomorrow
- id: startup_automations
  alias: startup_automations
  trigger:
    platform: homeassistant
    event: start
  action:
  - service: homeassistant.update_entity
    entity_id: sensor.jeff_location
  - service: homeassistant.update_entity
    entity_id: sensor.kat_location
  - service: homeassistant.update_entity
    entity_id: sensor.skylar_location
  - service: homeassistant.update_entity
    entity_id: sensor.today_is
  - service: homeassistant.update_entity
    entity_id: sensor.holiday
  - service: frontend.set_theme
    data:
      name: Google Dark Theme
- id: '1629578209876'
  alias: Remote System Heartbeat
  description: ''
  trigger:
  - platform: webhook
    webhook_id: remote_system_heartbeat
    id: heartbeat
    allowed_methods:
    - POST
    - PUT
    local_only: false
  - platform: time_pattern
    id: update
    minutes: /30
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: heartbeat
      sequence:
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.remote_system_heartbeat
        data:
          datetime: '{{ now().strftime(''%Y-%m-%d %H:%M:%S'') }}'
      - service: input_select.select_option
        target:
          entity_id: input_select.remote_system_status
        data:
          option: alive
    - conditions:
      - condition: trigger
        id: update
      - condition: template
        value_template: '{{ (as_timestamp(now()) - as_timestamp(states(''input_datetime.remote_system_heartbeat'')))
          < 3600 }}'
      sequence:
      - service: input_select.select_option
        target:
          entity_id: input_select.remote_system_status
        data:
          option: alive
    default:
    - service: input_select.select_option
      target:
        entity_id: input_select.remote_system_status
      data:
        option: unknown
  mode: single
- id: '1629581648846'
  alias: Remote System Alert
  description: ''
  trigger:
  - platform: state
    entity_id: input_select.remote_system_status
    from: alive
    to: unknown
    id: alert
  - platform: state
    entity_id: input_select.remote_system_status
    id: alive
    from: unknown
    to: alive
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: alert
      sequence:
      - service: notify.mobile_app_jeffrey_ha_app
        data:
          message: Remote System is Down!!
    - conditions:
      - condition: trigger
        id: alive
      sequence:
      - service: notify.mobile_app_jeffrey_ha_app
        data:
          message: Remote System is Alive again
    default: []
  mode: single
- id: '1629837216637'
  alias: Send Heartbeat
  description: ''
  trigger:
  - platform: time_pattern
    minutes: /30
  - platform: homeassistant
    event: start
  condition: []
  action:
  - service: rest_command.remote_system_webhook
  mode: single
- id: just_a_test_webhook
  alias: Testing Webhooks
  description: ''
  trigger:
  - platform: webhook
    webhook_id: send_a_message
    allowed_methods:
    - POST
    - PUT
    local_only: false
  action:
  - service: notify.mobile_app_jeffrey_ha_app
    data:
      message: '{{ trigger.json.message }}'
  - service: '{{ trigger.json.service }}'
    data:
      entity_id: '{{ trigger.json.entity }}'
  mode: single
- id: skylar_is_awake
  alias: Skylar is Awake
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.skylars_bed_stairs
    to: 'on'
    from: 'off'
  condition:
  - condition: time
    after: 02:00:00
    before: '10:00:00'
    weekday:
    - sat
    - fri
    - thu
    - wed
    - tue
    - mon
    - sun
  - condition: state
    entity_id: input_boolean.skylar_awake
    state: 'off'
  action:
  - service: input_datetime.set_datetime
    entity_id: input_datetime.skylar_awake_at
    data:
      time: '{{ now().strftime(''%H:%M'') }}'
  - service: input_boolean.turn_on
    entity_id: input_boolean.skylar_awake
  - service: scene.turn_on
    data: {}
    target:
      entity_id: scene.skylar_bedroom_morning
  initial_state: true
- id: skylar_early_morning_tv
  alias: Skylar Early Morning TV
  initial_state: true
  trigger:
  - platform: state
    entity_id: media_player.theater_tv
    to: 'on'
    from: 'off'
  - platform: state
    entity_id: media_player.croft_tv
    to: playing
  condition:
  - condition: time
    after: 05:00:00
    before: 08:30:00
  - condition: state
    entity_id: input_boolean.skylar_dressed_reminder
    state: 'off'
  - condition: state
    entity_id: input_boolean.skylar_awake
    state: 'on'
  action:
  - service: script.status_annc
    data:
      who: "{% if is_state('media_player.theater_tv', 'on') %}\n  theater \n{% else
        %}\n  croft\n{% endif %}"
      call_interuption: 1
      call_skylar_dressed_reminder: 1
  - service: input_boolean.turn_on
    entity_id: input_boolean.skylar_dressed_reminder
- id: kat_arrives_zoo
  alias: Kat Arrives at Zoo
  initial_state: true
  trigger:
  - platform: zone
    event: enter
    zone: zone.zooatlanta
    entity_id: person.katherine
  condition:
    condition: time
    after: 07:00:00
    before: '10:00:00'
  action:
  - service: input_boolean.turn_off
    entity_id: input_boolean.kat_travel_monitor
  - if:
    - condition: state
      entity_id: input_boolean.skylar_school
      state: 'off'
    then:
    - service: input_select.select_option
      target:
        entity_id: input_select.skylar_is_with
      data:
        option: "{% if is_state('input_select.skylar_is_with', 'Self') %}\n  Dad\n{%
          else %}\n  {{ states('input_select.skylar_is_with') }}\n{% endif %}\n"
  - service: script.text_notify
    data:
      who: jeff
      message: Kat is at work
- id: kat_leaves_zoo
  alias: Kat Leaves Zoo Notification
  initial_state: true
  trigger:
  - platform: zone
    event: leave
    zone: zone.zooatlanta
    entity_id: person.katherine
  condition:
    condition: time
    after: '16:00:00'
    before: '18:00:00'
  action:
  - service: input_boolean.turn_on
    entity_id: input_boolean.kat_travel_monitor
  - service: script.text_notify
    data:
      who: jeff
      message: Kat left work
- id: 1c51df28-369e-41e5-a590-bea0f1beafaa
  alias: Kat Tracking Mode
  initial_state: true
  trigger:
  - platform: state
    entity_id: input_boolean.kat_tracking_mode
    to: 'on'
    from: 'off'
    id: tracking_on
  - platform: state
    entity_id: input_boolean.kat_tracking_mode
    to: 'off'
    from: 'on'
    id: tracking_off
  - platform: state
    entity_id: sensor.kat_location
    attribute: state
    id: state_updated
  - platform: state
    entity_id: sensor.kat_location
    attribute: county
    to: Fayette County
    id: fayette
  condition:
    condition: state
    entity_id: input_boolean.kat_tracking_mode
    state: 'on'
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: state_updated
      sequence:
      - service: script.speech_engine
        data:
          who: jeff
          message: "{{ states('sensor.tts_interuption') }}  {{ [\n    'It appears
            Kat has entered the state of ' + state_attr('sensor.kat_location','state')
            + '.' ,\n    'the latest report shows Kat has crossed the ' + state_attr('sensor.kat_location','state')
            + ' state line.',\n    'I have detected Blueys drive signature entering
            the state of ' + state_attr('sensor.kat_location','state') +'.'\n  ] |
            random }}\n{{ states('sensor.tts_kat_location') }}\n"
      - service: script.text_notify
        data:
          who: jeff
          title: Kat Travel Update - State
          message: "{{ [\n    'It appears Kat has entered the state of ' + state_attr('sensor.kat_location','state')
            + '.' ,\n    'the latest report shows Kat has crossed the ' + state_attr('sensor.kat_location','state')
            + ' state line.',\n    'I have detected Blueys drive signature entering
            the state of ' + state_attr('sensor.kat_location','state') +'.'\n  ] |
            random }}\n"
    - conditions:
      - condition: trigger
        id: fayette
      sequence:
      - service: script.speech_engine
        data:
          who: jeff
          message: "{{ states('sensor.tts_interuption') }}  {{ [\n    'Kat has entered
            ' + state_attr('sensor.kat_location','county') + '.' ,\n    'the latest
            report shows Kat has crossed the ' + state_attr('sensor.kat_location','county')
            + ' line.',\n    'I have detected Blueys drive signature entering ' +
            state_attr('sensor.kat_location','county') +'.'\n  ] | random }}\n{{ states('sensor.tts_kat_location')
            }}\n"
      - service: script.text_notify
        data:
          who: jeff
          title: Kat Travel Update - County
          message: "{{[\n    'Kat has entered ' + state_attr('sensor.kat_location','county')
            + '.' ,\n    'the latest report shows Kat has crossed the ' + state_attr('sensor.kat_location','county')
            + ' line.',\n    'I have detected Blueys drive signature entering ' +
            state_attr('sensor.kat_location','county') +'.'\n  ] | random }}\n"
    - conditions:
      - condition: trigger
        id: tracking_on
      sequence:
      - service: script.speech_engine
        data:
          who: jeff
          message: "{{ [\n    'I am now tracking Kats travel and will report any signifigant
            changes. ' ,\n    'Tracking mode is now enabled for Kat. ',\n    'I am
            attempting to locl on to Blueys drive signature and will provide updates
            if anything changes. '\n  ] | random }}\n{{ states('sensor.tts_kat_location')
            }}\n"
      - service: script.text_notify
        data:
          who: jeff
          message: Kat Tracking mode enabled
    - conditions:
      - condition: trigger
        id: tracking_off
      sequence:
      - service: script.speech_engine
        data:
          who: jeff
          message: "{{ [\n    'I am no longer tracking Kats travel. ' ,\n    'Tracking
            mode is now disabled for Kat. '\n  ] | random }}\n"
      - service: script.text_notify
        data:
          who: jeff
          message: Kat Tracking mode disabled
    default: []
- id: ec8cc298-c4e6-4ecb-9cd2-4975b52ef044
  alias: Skylar School Tracking
  trigger:
  - entity_id: person.jeffrey
    event: leave
    platform: zone
    zone: zone.shmes
    id: leave
    alias: When Jeff leaves school
  - entity_id: person.katherine
    event: leave
    platform: zone
    zone: zone.shmes
    id: leave
    alias: When Kat leaves school
  - entity_id: person.jeffrey
    event: enter
    platform: zone
    zone: zone.shmes
    id: dad
    alias: When Jeff arrives at school
  - entity_id: person.katherine
    event: enter
    platform: zone
    zone: zone.shmes
    id: mom
    alias: When Kat arrives at school
  condition:
  - condition: time
    weekday:
    - mon
    - tue
    - wed
    - thu
    - fri
  - condition: state
    entity_id: input_boolean.school_in_session
    state: 'on'
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: dad
      - condition: template
        value_template: '{{ states(''person.katherine'') not in [''SHMES''] }}'
      - condition: state
        entity_id:
        - input_boolean.skylar_school
        state: 'on'
      sequence:
      - service: script.text_notify
        data:
          who: kat
          message: Jeff has arrived at School for Pickup
      - service: input_select.select_option
        target:
          entity_id: input_select.skylar_is_with
        data:
          option: "{% if is_state('input_select.skylar_is_with', 'Self') %}\n  Dad\n{%
            else %}\n  {{ states('input_select.skylar_is_with') }}\n{% endif %}\n"
    - conditions:
      - condition: trigger
        id: mom
      - condition: template
        value_template: '{{ states(''person.jeffrey'') not in [''SHMES''] }}'
      - condition: state
        entity_id:
        - input_boolean.skylar_school
        state: 'on'
      sequence:
      - service: script.text_notify
        data:
          who: jeff
          message: Kat has arrived at School for Pickup
      - service: input_select.select_option
        target:
          entity_id: input_select.skylar_is_with
        data:
          option: "{% if is_state('input_select.skylar_is_with', 'Self') %}\n  Mom\n{%
            else %}\n  {{ states('input_select.skylar_is_with') }}\n{% endif %}\n"
    - conditions:
      - condition: trigger
        id: leave
      - condition: state
        entity_id:
        - input_boolean.skylar_school
        state: 'on'
      - condition: time
        after: 08:30:00
        weekday:
        - mon
        - tue
        - wed
        - thu
        - fri
      sequence:
      - service: script.text_notify
        data:
          who: parents
          message: Skylar has been picked up from School.
      - service: input_boolean.turn_off
        entity_id: input_boolean.skylar_school
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.last_school_pickup
        data:
          timestamp: '{{ now() }}'
    - conditions:
      - condition: trigger
        id: leave
      - condition: state
        entity_id:
        - input_boolean.skylar_school
        state: 'off'
      sequence:
      - service: script.text_notify
        data:
          who: parents
          message: Skylar has been dropped off School.
      - service: input_boolean.turn_on
        entity_id: input_boolean.skylar_school
      - service: input_select.select_option
        target:
          entity_id: input_select.skylar_is_with
        data:
          option: Self
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.last_school_dropoff
        data:
          timestamp: '{{ now() }}'
    default: []
  initial_state: true
- id: jeff_arrives_summit
  alias: Jeff Arrives At Summit
  trigger:
  - entity_id: person.jeffrey
    event: enter
    platform: zone
    zone: zone.summit
  action:
  - service: script.text_notify
    data:
      who: kat
      message: Jeff has arrived at Summit
  - if:
    - condition: state
      entity_id: input_boolean.skylar_school
      state: 'off'
    then:
    - service: input_select.select_option
      target:
        entity_id: input_select.skylar_is_with
      data:
        option: "{% if is_state('input_select.skylar_is_with', 'Self') %}\n  Mom\n{%
          else %}\n  {{ states('input_select.skylar_is_with') }}\n{% endif %}\n"
  initial_state: true
- id: e1cb15b0-0423-11eb-adc1-0242ac120002
  alias: Zone Debugger
  trigger:
  - platform: state
    entity_id: person.jeffrey
  condition:
  - condition: state
    entity_id: input_boolean.jeff_location_debug
    state: 'on'
  action:
  - service: script.jeff_location_debug
- id: jeff_leaves_summit
  alias: Jeff Leaves Summit
  initial_state: true
  trigger:
  - entity_id: person.jeffrey
    event: leave
    platform: zone
    zone: zone.summit
  action:
  - service: input_boolean.turn_off
    entity_id: input_boolean.jeff_traffic_alert_home
- id: guests_have_arrived
  alias: Guests have arrived
  trigger:
  - entity_id: person.papa
    event: enter
    platform: zone
    zone: zone.home
  - entity_id: person.uncle_matt
    event: enter
    platform: zone
    zone: zone.home
  action:
  - service: script.standby
  - service: script.family_is_home
  - service: input_boolean.turn_on
    entity_id: input_boolean.guest_mode
  initial_state: true
- id: disable_bad_traffic_home_jeff
  alias: Disabling Jeff Bad Traffic Home
  initial_state: true
  trigger:
  - platform: numeric_state
    entity_id: sensor.jeff_ett_home
    below: 40
  - platform: state
    entity_id: sensor.jeff_destination
    to: Home
  condition:
  - condition: state
    entity_id: input_boolean.jeff_traffic_alert_home
    state: 'on'
  action:
  - service: input_boolean.turn_off
    entity_id: input_boolean.jeff_traffic_alert_home
- id: e1cb1114-0423-11eb-adc1-0242ac120002
  alias: Jeff Last Known Location
  initial_state: true
  trigger:
  - platform: state
    entity_id: sensor.jeffrey_ha_app_geocoded_location
  action:
  - service: mqtt.publish
    data:
      topic: house/jeff/last_known_location
      payload_template: '{{ states(''sensor.jeffrey_ha_app_geocoded_location'') }}'
      retain: true
- id: e1cb11d2-0423-11eb-adc1-0242ac120002
  alias: Kat Last Known Location
  initial_state: true
  trigger:
  - platform: state
    entity_id: sensor.iphone_geocoded_location
  action:
  - service: mqtt.publish
    data:
      topic: house/kat/last_known_location
      payload_template: '{{ states(''sensor.iphone_geocoded_location'') }}'
      retain: true
- id: door_notifications
  alias: Door Notifications
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.front_door_contact
    - binary_sensor.kitchen_door_contact
    - binary_sensor.basement_door_contact
    - binary_sensor.back_door_contact
    - binary_sensor.garage_door
    to: 'on'
    id: chime
  - platform: state
    entity_id:
    - binary_sensor.front_door_contact
    - binary_sensor.kitchen_door_contact
    - binary_sensor.basement_door_contact
    - binary_sensor.back_door_contact
    - binary_sensor.basement_access_door
    from: 'off'
    to: 'on'
    for: 00:01:00
    id: door_still_open
  condition:
  - condition: state
    entity_id: input_boolean.audible_notifications
    state: 'on'
  - condition: state
    entity_id: input_boolean.guest_mode
    state: 'off'
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: chime
      - condition: or
        conditions:
        - condition: state
          entity_id: media_player.ha_blue
          state: idle
        - condition: state
          entity_id: media_player.ha_blue
          state: 'off'
      sequence:
      - service: media_player.volume_set
        data_template:
          entity_id: media_player.ha_blue
          volume_level: 0.2
      - service: media_player.play_media
        entity_id: media_player.ha_blue
        data:
          media_content_id: https://slackerlabs.s3.amazonaws.com/audio/notifications/door_open.wav
          media_content_type: music
    - conditions:
      - condition: trigger
        id: door_still_open
      sequence:
      - service: script.speech_engine
        data:
          message: "The {{ trigger.to_state.attributes.friendly_name }} {{ [\n  '
            is standing open.',\n  ' is open.',\n  ' does not close on its own.',\n
            \ ' was left standing open.'\n] | random }} {{ [\n    'Can a human be
            so kind and close it?',\n    'The air quality in this house has actually
            improved.',\n    'Closing the door would improve the internal climate
            of the house.',\n    'Hey. The door was just opened and this is crazy.
            But now you know. So close it maybe.',\n    'If at first you do not succeed
            in closing the door, please try again. Like, Right now seems like a good
            time to try again.',\n    'And the automatic door closer appears to be
            broken. So, you know what to do. Time to get physical.',\n    'I would
            close it for you. But I lack legs. And Arms.'\n] | random }}\n"
  initial_state: true
- id: guest_mode_feedback
  alias: Guest Mode Audio Feedback
  trigger:
  - platform: state
    entity_id:
    - input_boolean.guest_mode
    from: 'off'
    to: 'on'
  action:
  - service: script.speech_engine
    data_template:
      message: '{{ [ "Guest Mode has been enabled.", "I have turned on guest mode.",
        "I have enabled guest mode. ", "Guest Mode is on." ] | random }}

        '
- id: motion_detected_front_door
  alias: Motion Detected Front Door
  trigger:
  - platform: state
    entity_id: binary_sensor.aarlo_motion_front_door
    from: 'off'
    to: 'on'
  action:
  - service: image_processing.scan
    entity_id: image_processing.doods_aarlo_front_door
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ states("image_processing.doods_aarlo_front_door") | int
          > 0 }}'
      sequence:
      - service: mqtt.publish
        data:
          topic: house/front_door_motion/away_count
          payload_template: '{{ states.sensor.front_door_motion_away_count.state |
            int + 1 }}'
          retain: true
      - service: script.status_annc
        data:
          who: '{{ states.sensor.room_presence.state }}'
          call_interuption: 1
          call_snark_door_motion: 1
          speech_message: '{{ [ "I have detected someone at the ", "Someone appears
            to be at the ", "There is a person at the ", "My sensors are picking up
            presence at the ", "We appear to have a visitor at the ", "My sensors
            have detected a meat popsicle at the " ] | random }} {{ trigger.to_state.attributes.friendly_name
            }}.

            '
  - delay:
      minutes: 2
  initial_state: true
- id: water_leak_detected
  alias: Welcome Home
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.0x286d9700010c9f39_water_leak
    from: 'off'
    to: 'on'
  action:
  - service: script.text_notify
    data_template:
      who: parents
      title: Water Leak!!!!
      message: '{% set location = trigger.to_state.attributes.friendly_name %} location
        + has detected a leak

        '
  - service: script.jarvis_alert
    data_template:
      message: "{% set location = trigger.to_state.attributes.friendly_name %} {%-
        macro issue_report(location) -%}\n  {{ [\n      'I have detected an issue!',\n
        \     'We have a problem!',\n      'You might not like this.',\n      'There
        is something that needs your attention.'\n      ] | random }}\n  {{ [\n    location
        + \" is detecting a leak.\",\n    location + \" has detected water.\",\n    location
        + \" is picking up water.\"\n    ] | random }}\n{%- endmacro -%} {{issue_report(location)}}\n"
- alias: record previous day rainfall
  trigger:
  - platform: time
    at: '23:58:00'
  action:
    service: mqtt.publish
    data_template:
      topic: house/rain/yesterday_total
      retain: true
      payload: '{{ states(''sensor.todays_rainfall'') }}'
  id: e94c2203788540cbbf31a56dee5c683d
- alias: YouTube Notification - SlackerLabs
  id: 5e751352-067e-4706-978a-2479b6f5fd96
  trigger:
  - platform: state
    entity_id: sensor.slackerlabs
  condition:
  - condition: template
    value_template: '{{ trigger.from_state.attributes.url != trigger.to_state.attributes.url
      }}'
  action:
  - service: script.text_notify
    data_template:
      who: jeff
      message: Your Video is now Live {{ states('sensor.slackerlabs') }} - {{ state_attr('sensor.slackerlabs','url')
        }}
  - service: script.mastodon_notify
    data:
      message: '{{ [ "Brand New SlackerLabs Video! {{ states(''sensor.slackerlabs'')
        }} - {{ state_attr(''sensor.slackerlabs'',''url'') }} #homeassistant #homeautomation
        #smarthome ", "New SlackerLabs Video went Live! {{ states(''sensor.slackerlabs'')
        }} - {{ state_attr(''sensor.slackerlabs'',''url'') }} #homeassistant #homeautomation
        #smarthome ", "Boom! New SlackerLabs Video! {{ states(''sensor.slackerlabs'')
        }} - {{ state_attr(''sensor.slackerlabs'',''url'') }} #homeassistant #homeautomation
        #smarthome ", "Its time for a New SlackerLabs Video! {{ states(''sensor.slackerlabs'')
        }} - {{ state_attr(''sensor.slackerlabs'',''url'') }} #homeassistant #homeautomation
        #smarthome ", "Today is SlackerLabs Video Release Day! {{ states(''sensor.slackerlabs'')
        }} - {{ state_attr(''sensor.slackerlabs'',''url'') }} #homeassistant #homeautomation
        #smarthome " ] | random }}'
      who: slackerlabs
- id: '1666046983235'
  alias: Galaxy Lamp
  description: ''
  trigger:
  - platform: state
    entity_id:
    - light.skylar_galaxy
    from: 'off'
    to: 'on'
    id: lamp_on
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: timer.galaxy_lamp
    id: lamp_off
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: lamp_on
      sequence:
      - service: timer.start
        data: {}
        target:
          entity_id: timer.galaxy_lamp
    - conditions:
      - condition: trigger
        id: lamp_off
      sequence:
      - service: light.turn_off
        data: {}
        target:
          entity_id:
          - light.skylar_galaxy
          - light.skylar_arches
  mode: single
- id: '1666612800045'
  alias: Living Room Lighting
  description: ''
  trigger:
  - platform: time
    at: '23:00:00'
    id: lights_out
  - platform: state
    entity_id:
    - binary_sensor.living_room_occupied
    enabled: true
    from: 'off'
    to: 'on'
    id: motion
  - platform: state
    entity_id:
    - binary_sensor.living_room_occupied
    from: 'on'
    to: 'off'
    for: 00:01:00
    id: no_motion
  - platform: state
    entity_id:
    - binary_sensor.living_room_occupied
    from: 'on'
    to: 'off'
    for: 00:05:00
    id: vacant
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: lights_out
      sequence:
      - if:
        - condition: state
          entity_id: binary_sensor.living_room_occupied
          state: 'on'
        then:
        - service: scene.turn_on
          data: {}
          target:
            entity_id: scene.living_room_night
        alias: If occupied set the scene
      - service: light.turn_off
        target:
          entity_id: light.living_room_main_lights
        data: {}
    - conditions:
      - condition: trigger
        id: no_motion
      sequence:
      - service: scene.turn_on
        data: {}
        target:
          entity_id: scene.living_room_dim
    - conditions:
      - condition: trigger
        id: vacant
      sequence:
      - if:
        - condition: state
          entity_id: binary_sensor.quiet_time
          state: 'on'
        then:
        - service: scene.turn_on
          data: {}
          target:
            entity_id: scene.living_room_night
        else:
        - service: light.turn_off
          data: {}
          target:
            entity_id:
            - light.living_room_tower_lamp
            - light.living_room_lamp
            - light.front_door_lamp
      - service: light.turn_off
        target:
          entity_id: light.living_room_main_lights
        data: {}
    - conditions:
      - condition: trigger
        id: motion
      sequence:
      - if:
        - condition: state
          entity_id: binary_sensor.day
          state: 'on'
        then:
        - service: scene.turn_on
          target:
            entity_id: scene.living_room_lamps_on
          metadata: {}
      - if:
        - condition: state
          entity_id: binary_sensor.quiet_time
          state: 'off'
        - condition: state
          entity_id: binary_sensor.night
          state: 'on'
        then:
        - service: scene.turn_on
          target:
            entity_id: scene.living_room_lamps_on
          metadata: {}
      - if:
        - condition: state
          entity_id: binary_sensor.quiet_time
          state: 'on'
        then:
        - service: scene.turn_on
          target:
            entity_id: scene.living_room_dim
          metadata: {}
  mode: restart
- id: '1666631521662'
  alias: Security System
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.family_home
    from: 'on'
    to: 'off'
    id: family_gone
  - platform: state
    entity_id:
    - binary_sensor.family_home
    from: 'off'
    to: 'on'
    id: family_home
  - platform: time
    at: input_datetime.security_armed_at
    id: lights_out
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: family_gone
      - condition: state
        entity_id: input_boolean.guest_mode
        state: 'off'
      sequence:
      - if:
        - condition: state
          entity_id: group.external_doors
          state: 'off'
        then:
        - service: input_boolean.turn_on
          data: {}
          target:
            entity_id: input_boolean.sentry_mode
        - service: script.text_notify
          data:
            who: jeff
            message: Maison Des Lunes security is armed.
        else:
        - service: script.text_notify
          data:
            who: jeff
            message: Unable to lock down Maison Des Lunes due to issue
      - service: scene.turn_on
        entity_id: scene.lockdown
    - conditions:
      - condition: trigger
        id: family_home
      - condition: state
        entity_id: input_boolean.sentry_mode
        state: 'on'
      sequence:
      - service: input_boolean.turn_off
        data: {}
        target:
          entity_id: input_boolean.sentry_mode
      - service: script.text_notify
        data:
          who: jeff
          message: Maison Des Lunes security is disarmed.
      - if:
        - condition: state
          entity_id: sun.sun
          state: above_horizon
        - condition: state
          entity_id: input_boolean.barn_door_protocol
          state: 'off'
        then:
        - service: cover.open_cover
          data: {}
          target:
            entity_id:
            - cover.curtain_left
            - cover.master_bedroom_shade
  mode: single
- id: '1667171722597'
  alias: Driveway Light
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.garage_door
    from: 'off'
    to: 'on'
    id: garage_open
  - platform: state
    entity_id:
    - binary_sensor.garage_door
    from: 'on'
    to: 'off'
    id: garage_closed
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: garage_open
      - condition: state
        entity_id: sun.sun
        state: below_horizon
      sequence:
      - service: switch.turn_on
        data: {}
        target:
          entity_id: switch.driveway_light
    - conditions:
      - condition: trigger
        id: garage_closed
      sequence:
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.driveway_light
  mode: single
- id: '1667222853229'
  alias: Skylar Bedroom Lights
  description: ''
  trigger:
  - platform: state
    entity_id:
    - light.skylar_arches
    from: 'on'
    to: 'off'
    id: sleepaid_off
  - platform: state
    entity_id:
    - input_boolean.skylar_school
    from: 'off'
    to: 'on'
    id: skylar_gone
  - platform: state
    entity_id:
    - binary_sensor.skylars_bedroom_motion
    from: 'off'
    to: 'on'
    id: motion
  - platform: state
    entity_id:
    - binary_sensor.skylars_bedroom_motion
    from: 'on'
    to: 'off'
    for:
      hours: 0
      minutes: 5
      seconds: 0
    id: no_motion
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: sleepaid_off
      sequence:
      - service: scene.turn_on
        data: {}
        target:
          entity_id: scene.skylar_bedroom_night
    - conditions:
      - condition: trigger
        id: skylar_gone
      sequence:
      - service: light.turn_off
        data: {}
        target:
          entity_id: light.skylars_dresser_lamp
    - conditions:
      - condition: trigger
        id: motion
      - condition: state
        entity_id: input_boolean.skylar_awake
        state: 'on'
      sequence:
      - service: light.turn_on
        data:
          brightness_pct: 100
          rgb_color:
          - 255
          - 255
          - 255
        target:
          entity_id: light.skylars_dresser_lamp
    - conditions:
      - condition: trigger
        id: no_motion
      - condition: state
        entity_id: input_boolean.skylar_awake
        state: 'on'
      sequence:
      - service: light.turn_off
        data: {}
        target:
          entity_id: light.skylars_dresser_lamp
  mode: restart
- id: '1670357882397'
  alias: Christmas Tree Display
  description: ''
  trigger:
  - platform: time
    at: '21:30:00'
    id: shutdown
  - platform: sun
    event: sunset
    offset: 0
    id: sundown
  condition:
  - condition: state
    entity_id: input_boolean.holiday_mode
    state: 'on'
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: sundown
      sequence:
      - if:
        - condition: state
          entity_id: cover.curtain_left
          state: closed
        then:
        - service: cover.open_cover
          data: {}
          target:
            entity_id: cover.curtain_left
      - service: switch.turn_on
        data: {}
        target:
          entity_id: switch.christmas_tree
    - conditions:
      - condition: trigger
        id: shutdown
      sequence:
      - if:
        - condition: state
          entity_id: cover.curtain_left
          state: open
        then:
        - service: cover.close_cover
          data: {}
          target:
            entity_id: cover.curtain_left
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.christmas_tree
  mode: single
- id: '1672256961409'
  alias: Security Motion Notifications
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.front_door_motion
    - binary_sensor.front_porch_motion
    - binary_sensor.c8c_f88801557_motion_trigger
    - binary_sensor.deck_motion
    - binary_sensor.front_porch_person_detected
    - binary_sensor.1_person_detected
    - binary_sensor.back_yard_person_detected
    from: 'off'
    to: 'on'
  condition:
  - condition: or
    conditions:
    - condition: state
      entity_id: input_boolean.barn_door_protocol
      state: 'on'
    - condition: state
      entity_id: input_boolean.sentry_mode
      state: 'on'
  action:
  - service: script.text_notify
    data:
      who: "{% if is_state('person.katherine','home') and is_state('person.jeffrey','home')
        \ %}\n  parents\n{% elif is_state('person.katherine','home') and is_state('person.jeffrey','not_home')
        %}\n  kat\n{% elif is_state('person.katherine','not_home') and is_state('person.jeffrey','home')
        \ %}\n  jeff\n{% else %}\n  jeff\n{% endif %}\n"
      message: "{{ [ \n  \"There is {{ trigger.to_state.attributes.friendly_name }}.\"\n]
        | random }}\n"
  mode: queued
- id: '1678379959248'
  alias: test dog button
  description: ''
  trigger:
  - platform: state
    entity_id:
    - sensor.dog_mode_action
    to: single
  condition: []
  action:
  - service: script.text_notify
    data:
      who: jeff
      message: button pressed
  mode: single
- id: '1680823121922'
  alias: Playstation Cooling
  description: ''
  trigger:
  - platform: numeric_state
    entity_id: sensor.playstation_power_power
    above: 100
    id: power_on
  - platform: numeric_state
    entity_id: sensor.playstation_power_power
    for:
      hours: 0
      minutes: 2
      seconds: 0
    below: 10
    id: power_off
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: power_on
      sequence:
      - service: switch.turn_on
        data: {}
        target:
          device_id: 11dc03a636831f468614f7a24764e1ac
    - conditions:
      - condition: trigger
        id: power_off
      sequence:
      - service: switch.turn_off
        data: {}
        target:
          device_id: 11dc03a636831f468614f7a24764e1ac
  mode: single
- id: '1684166371254'
  alias: Calculate Basement Temp
  description: ''
  trigger:
  - platform: state
    entity_id:
    - sensor.basement_air_device_temperature
  condition:
  - condition: template
    value_template: '{{ has_value(''sensor.basement_air_device_temperature'') }}'
  action:
  - service: mqtt.publish
    data:
      qos: 0
      retain: true
      topic: house/basement/temperature_c
      payload: '{{ ((states(''sensor.basement_air_device_temperature'') | int - 32)
        / 1.8) | round(0) }}

        '
  mode: single
- id: '1691031782065'
  alias: Reset RoomSense
  description: ''
  trigger:
  - platform: template
    value_template: '{{ not has_value(''number.roomsense_maxmacrorange_f412fae8c830'')
      }}'
    for:
      hours: 0
      minutes: 2
      seconds: 0
  condition: []
  action:
  - if:
    - condition: state
      entity_id: sensor.jeff_room
      state: studio
    then:
    - service: script.speech_engine
      data:
        who: studio
        message: "{{[\n  ',it appears the Room Sense IQ has gone off line.',\n  ',
          the room sense IQ has malfunction.',\n  ', I have detected an anonmally
          in the room sense iq sensor.'\n  ] | random}}\n{{[\n  'I am attempting to
          bring it back online.',\n  'I am running diagnostics and will let you know
          when I am finished.',\n  'I am attempting to recalibrate the sensor.'\n
          \ ] | random}}\n"
    else:
    - service: script.text_notify
      data_template:
        who: jeff
        message: "{{[\n  'Sir,it appears the Room Sense IQ has gone off line.',\n
          \ 'Sir, the room sense IQ has malfunction.',\n  'Sir, I have detected an
          anonmally in the room sense iq sensor.'\n  ] | random}}\n{{[\n  'I am attempting
          to bring it back online.',\n  'I am running diagnostics and will let you
          know when I am finished.',\n  'I am attempting to recalibrate the sensor.'\n
          \ ] | random}}"
  - service: switch.turn_off
    data: {}
    target:
      entity_id: switch.usb_hub
  - delay:
      hours: 0
      minutes: 0
      seconds: 30
      milliseconds: 0
  - service: switch.turn_on
    data: {}
    target:
      entity_id: switch.usb_hub
  mode: single
- id: '1694303542686'
  alias: Flic_mb
  description: ''
  trigger:
  - platform: webhook
    allowed_methods:
    - POST
    - PUT
    local_only: false
    webhook_id: -pjfaK0fYljQ9TqSilPc5A29W
  condition: []
  action:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ trigger.json.action == ''lights_out'' }}

          '
      sequence:
      - service: script.master_bedroom_lights_off
        data: {}
    - conditions:
      - condition: template
        value_template: '{{ trigger.json.action == ''override'' }}

          '
      sequence:
      - service: input_boolean.turn_on
        data: {}
        target:
          entity_id: input_boolean.light_override
    - conditions:
      - condition: template
        value_template: '{{ trigger.json.action == ''disneymusic'' }}'
      sequence:
      - service: input_boolean.toggle
        data: {}
        target:
          entity_id: input_boolean.disney_background
    - conditions:
      - condition: template
        value_template: '{{ trigger.json.action == ''halloween'' }}'
      sequence:
      - service: input_boolean.toggle
        data: {}
        target:
          entity_id: input_boolean.this_is_halloween
    - conditions:
      - condition: template
        value_template: '{{ trigger.json.action == ''lr_on'' }}'
      sequence:
      - service: scene.turn_on
        entity_id: scene.living_room_lamps_on
    - conditions:
      - condition: template
        value_template: '{{ trigger.json.action == ''lr_dim'' }}'
      sequence:
      - service: scene.turn_on
        entity_id: scene.living_room_dim
    - conditions:
      - condition: template
        value_template: '{{ trigger.json.action == ''lr_night'' }}'
      sequence:
      - service: scene.turn_on
        entity_id: scene.living_room_dim
    - conditions:
      - condition: template
        value_template: '{{ trigger.json.action == ''lr_off'' }}'
      sequence:
      - service: light.turn_off
        entity_id: ight.living_room_tower_lamp,light.living_room_lamp,light.front_door_lamp
  mode: single
- id: '1698951808744'
  alias: ifttt reminders handler
  description: ''
  trigger:
  - platform: webhook
    allowed_methods:
    - POST
    - PUT
    local_only: false
    webhook_id: -Ds_MxRPlYKaVvNiix6R6wqM-
  condition: []
  action:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ trigger.json.event == ''add_grocery'' }}'
      sequence:
      - service: todo.add_item
        data:
          item: '{{ trigger.json.item }}'
        target:
          entity_id: todo.grocery
  mode: single
- id: '1698972828033'
  description: ''
  trigger: []
  condition: []
  action:
  - service: tts.cloud_say
    data:
      cache: false
      entity_id: media_player.slacker_labs_echo
      message: test
  mode: single
- id: '1699008516868'
  alias: Theater Bathroom
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.smart_night_light_w_occupancy_2
    - binary_sensor.smart_night_light_w_occupancy
    to: 'on'
    id: detected
  - platform: state
    entity_id:
    - binary_sensor.smart_night_light_w_occupancy_2
    to: 'off'
    id: clear
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - detected
      sequence:
      - service: light.turn_on
        data: {}
        target:
          entity_id: light.smart_night_light_w
    - conditions:
      - condition: trigger
        id:
        - clear
      sequence:
      - service: light.turn_off
        data: {}
        target:
          entity_id: light.smart_night_light_w
  mode: single
- id: '1700432878940'
  alias: master_bedroom_flicd
  description: ''
  trigger:
  - platform: state
    entity_id:
    - sensor.master_bedroom_button_action
    to: click
    id: click
  - platform: state
    entity_id:
    - sensor.master_bedroom_button_action
    to: double_click
    id: double_click
  - platform: state
    entity_id:
    - sensor.master_bedroom_button_action
    to: hold
    id: hold
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - click
      sequence:
      - service: input_boolean.turn_off
        data: {}
        target:
          entity_id: input_boolean.light_override
      - service: script.master_bedroom_lights_off
        data: {}
    - conditions:
      - condition: trigger
        id:
        - hold
      sequence:
      - service: scene.turn_on
        target:
          entity_id: scene.master_bedroom_on
        metadata: {}
      - service: input_boolean.turn_on
        data: {}
        target:
          entity_id: input_boolean.light_override
  mode: single
- id: '1709411285366'
  alias: Water Leaks
  description: ''
  trigger:
  - alias: Basement gets wet
    platform: state
    entity_id:
    - binary_sensor.havc_flood_sensor_water_leak
    - binary_sensor.pottery_flood_sensor_water_leak
    - binary_sensor.studio_flood_sensor_water_leak
    - binary_sensor.theater_flood_sensor_water_leak
    to: 'on'
    from: 'off'
    id: basement_floods
  condition:
  - condition: or
    conditions:
    - condition: state
      entity_id: group.family
      state: home
    - condition: state
      entity_id: input_boolean.guest_mode
      state: 'on'
  action:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - basement_floods
      sequence:
      - alias: Send text notification
        service: script.text_notify
        metadata: {}
        data:
          who: parents
          message: Water in the dungeon. Thought you ought to know.
          title: Water Detected!!!
  mode: single
- id: '1711370023021'
  alias: Skylars Room
  description: ''
  trigger:
  - platform: sun
    event: sunrise
    offset: 0
    id: sunup
  - platform: sun
    event: sunset
    offset: 0
    id: sunset
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - sunup
      sequence:
      - service: cover.open_cover
        metadata: {}
        data: {}
        target:
          entity_id: cover.skylar_blinds_one_2
      alias: Sun is up
    - conditions:
      - condition: trigger
        id:
        - sunset
      sequence:
      - service: cover.close_cover
        metadata: {}
        data: {}
        target:
          entity_id: cover.skylar_blinds_one_2
      alias: Sun is Down
  mode: single
